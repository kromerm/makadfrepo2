{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "makadflivesite"
		},
		"integrationRuntime_alwaysonIR": {
			"type": "string",
			"metadata": "Integration Runtime name",
			"defaultValue": "alwaysonIR"
		},
		"integrationRuntime_integrationRuntime1": {
			"type": "string",
			"metadata": "Integration Runtime name",
			"defaultValue": "integrationRuntime1"
		},
		"integrationRuntime_integrationRuntime2": {
			"type": "string",
			"metadata": "Integration Runtime name",
			"defaultValue": "integrationRuntime2"
		},
		"integrationRuntime_integrationRuntime3": {
			"type": "string",
			"metadata": "Integration Runtime name",
			"defaultValue": "integrationRuntime3"
		},
		"integrationRuntime_myDataFlowCluster": {
			"type": "string",
			"metadata": "Integration Runtime name",
			"defaultValue": "myDataFlowCluster"
		},
		"integrationRuntime_mylargecluster": {
			"type": "string",
			"metadata": "Integration Runtime name",
			"defaultValue": "mylargecluster"
		},
		"integrationRuntime_selfhostedir": {
			"type": "string",
			"metadata": "Integration Runtime name",
			"defaultValue": "selfhostedir"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureBlobStorage3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage3'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'AzureDataLakeStorage2'"
		},
		"AzureDataLakeStorage3_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage3'"
		},
		"AzureFunction1_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunction1'"
		},
		"AzureSqlDW1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDW1'"
		},
		"AzureSqlDW2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDW2'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"BaseballLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BaseballLS'"
		},
		"CosmosDb1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb1'"
		},
		"CosmosDb2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb2'"
		},
		"DWDimProd_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DWDimProd'"
		},
		"MoviesADLS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'MoviesADLS'"
		},
		"MyAzureBlobLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MyAzureBlobLinkedService'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"databrickswest_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'databrickswest'"
		},
		"mynewls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'mynewls'"
		},
		"mynewls1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'mynewls1'"
		},
		"A_G_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"A_G_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/A_G"
		},
		"Addresses_Blob_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Address.csv"
		},
		"Addresses_Blob_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/AW"
		},
		"AzureBlob1_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "part-00000-tid-3602434708290458144-2151ae16-5154-4f5e-b6af-9cac5957888f-407-c000.csv"
		},
		"AzureBlob1_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/taxipaymentout"
		},
		"AzureBlob2_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "movies*.csv"
		},
		"AzureBlob2_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"AzureBlob3_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "loan.csv"
		},
		"AzureBlob3_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"AzureBlobBaseballOutput_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureBlobBaseballOutput_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/baseball"
		},
		"AzureDataLakeStorageFile1_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureDataLakeStorageFile1_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/myfolder"
		},
		"AzureDataLakeStorageFile2_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "employee2.csv"
		},
		"AzureDataLakeStorageFile2_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/myfolder"
		},
		"BaseballBatting_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Batting.csv"
		},
		"BaseballBatting_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/baseball"
		},
		"BattingSink_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"BattingSink_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/baseball"
		},
		"BlobStoreIncremental_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@CONCAT('Incremental-', pipeline().RunId, '.txt') "
		},
		"BlobStoreIncremental_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/incremental"
		},
		"CADOutput_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"CADOutput_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/currency"
		},
		"CurrencyDatasetCAD_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Currency_GBP.txt"
		},
		"CurrencyDatasetCAD_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"CurrencyDatasetUSD_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Currency_USD.txt"
		},
		"CurrencyDatasetUSD_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"DemoSinkDataset_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DemoSinkDataset_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output"
		},
		"DestinationDataset_5ra_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DestinationDataset_5ra_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "somecontainer/markfolder"
		},
		"DestinationDataset_cce_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DestinationDataset_cce_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/json"
		},
		"DestinationDataset_d2r_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "myout.parquet"
		},
		"DestinationDataset_d2r_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/parquet"
		},
		"DestinationDataset_hii_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "_committed_2034928433163805213"
		},
		"DestinationDataset_hii_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/sample"
		},
		"H_P_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"H_P_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/H_P"
		},
		"MoviesDBDataset_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "moviesDB.csv"
		},
		"MoviesDBDataset_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"PlayersBlob_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "People.csv"
		},
		"PlayersBlob_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/baseball"
		},
		"Product_Blob_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Product2.csv"
		},
		"Product_Blob_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/AW"
		},
		"Q_Z_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"Q_Z_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/Q_Z"
		},
		"SourceDataset_cce_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "customers.json"
		},
		"SourceDataset_cce_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"SourceDataset_d2r_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Batting.csv"
		},
		"SourceDataset_d2r_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/baseball"
		},
		"SourceDataset_hii_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Batting.csv"
		},
		"SourceDataset_hii_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/baseball"
		},
		"TaxiDemoDayStatsSink_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"TaxiDemoDayStatsSink_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/dayout"
		},
		"TaxiDemoTotalByPaymentType_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"TaxiDemoTotalByPaymentType_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/taxipaymentout"
		},
		"TaxiDemoVendorStatsSink_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"TaxiDemoVendorStatsSink_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/vendorout"
		},
		"USDOutput_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"USDOutput_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/currency"
		},
		"blob_params_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "params-red.csv"
		},
		"blob_params_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"driftout_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"driftout_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/SchemaDriftOut"
		},
		"jsonblob_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "zips.json"
		},
		"jsonblob_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"locationMap_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "locationMap.csv"
		},
		"locationMap_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/Soccer"
		},
		"movie_dataflow_sink_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"movie_dataflow_sink_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output"
		},
		"movie_dataflow_source_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "movies.csv"
		},
		"movie_dataflow_source_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"movies2_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "movies.csv"
		},
		"movies2_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"others_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"others_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/others"
		},
		"salesdrift_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"salesdrift_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/SchemaDrift"
		},
		"soccer_events_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "events.csv"
		},
		"soccer_events_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/Soccer"
		},
		"taxi_trip_data_input_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "trip_data_1.csv"
		},
		"taxi_trip_data_input_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"taxi_trip_fare_input_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "trip_fare_1.csv"
		},
		"taxi_trip_fare_input_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ansgen2.dfs.core.windows.net"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://makadlsg2.dfs.core.windows.net"
		},
		"AzureDataLakeStorage2_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"AzureDataLakeStorage2_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "2e73f317-6696-4e10-9443-7dbc77273686"
		},
		"AzureDataLakeStorage3_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://makadlsg2.dfs.core.windows.net"
		},
		"AzureDataLakeStore1_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://makadls001.azuredatalakestore.net/webhdfs/v1"
		},
		"AzureDataLakeStore1_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"AzureDataLakeStore1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "1e42591f-1f0c-4c5a-b7f2-a268f6105ec5"
		},
		"AzureDataLakeStore1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "makbricksadf"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://makkv001.vault.azure.net/"
		},
		"HttpServer1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://www.yahoo.com"
		},
		"MoviesADLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://makadlsg2.dfs.core.windows.net"
		},
		"sqldbakv_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "SQLDB1"
		},
		"integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint": {
			"type": "string",
			"defaultValue": "makssis002.database.windows.net"
		},
		"integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName": {
			"type": "string",
			"defaultValue": "kromerm"
		},
		"integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword": {
			"type": "secureString"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_cce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_cce",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "mycontainer/SampleData/customers.json"
							},
							{
								"name": "Destination",
								"value": "mycontainer/output/json/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_cce",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_cce",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "Copy"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_cce')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_cce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DailyDWPattern')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DWStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StageData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"FileSource": {},
									"StageData": {}
								}
							},
							"staging": {}
						}
					},
					{
						"name": "LoadFromStage",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DWStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadFromStage",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageSource": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					},
					{
						"name": "Send email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "LoadFromStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://www.yahoo.com",
							"method": "POST",
							"headers": {},
							"body": "'hello'"
						}
					},
					{
						"name": "Process Models",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "LoadFromStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://www.yahoo.com",
							"method": "POST",
							"headers": {},
							"body": "'process'"
						}
					},
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DWStaging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/home"
						},
						"linkedServiceName": {
							"referenceName": "databrickswest",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/StageData')]",
				"[concat(variables('factoryId'), '/dataflows/LoadFromStage')]",
				"[concat(variables('factoryId'), '/linkedServices/databrickswest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatabricksPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/european_soccer_events/european_soccer_events_01_etl"
						},
						"linkedServiceName": {
							"referenceName": "databrickswest",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/databrickswest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dedupe Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Deduplication Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dedupeProb2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceName": {},
									"sinkDupes": {},
									"sinkNoDupes": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dedupeProb2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DistinctRows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DistinctRows",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DistinctRows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesCSV": {},
									"OutputDistinctData": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DistinctRows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Duplicates')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dedupe",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dedupeProb2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceName": {},
									"sinkDupes": {},
									"sinkNoDupes": {}
								}
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dedupeProb2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL Final Stage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Distribute Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": false
							},
							"sink": {
								"type": "SqlDWSink",
								"allowPolyBase": false,
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "movie_dataflow_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlDWTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Refresh Cubes",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Distribute Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://www.yahoo.com",
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Send Email Notices",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Distribute Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://www.yahoo.com",
							"method": "GET",
							"headers": {}
						}
					}
				],
				"parameters": {
					"issuccess": {
						"type": "Int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "PipelineController"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDWTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fixed Width Data Flow Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is an example of creating a data flow to process fixed-width text files",
				"activities": [
					{
						"name": "fixedwidth",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Fixed Width",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"fixedsource1": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Fixed Width')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadFacts2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Flow Fact Loader",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF-FactLoader",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Facts": {},
									"DimEmployee": {},
									"writeFactTable": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF-FactLoader')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieDemoPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteMovieDemoDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MovieDemo1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Movies": {},
									"Output": {}
								}
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MovieDemo1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieDemoPipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteMovieDemoDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MovieDemo1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Movies": {},
									"Output": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MovieDemo1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/My Incremental Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_LastVersion",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource"
							},
							"dataset": {
								"referenceName": "AzureSQLIncremental_Changes",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lookup_CurrentVersion",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT CHANGE_TRACKING_CURRENT_VERSION() as CurrentChangeTrackingVersion"
							},
							"dataset": {
								"referenceName": "AzureSqlIncremental_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Incrememental Copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_LastVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup_CurrentVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select data_source_table.PersonID,data_source_table.Name,data_source_table.Age, CT.SYS_CHANGE_VERSION, SYS_CHANGE_OPERATION from data_source_table RIGHT OUTER JOIN CHANGETABLE(CHANGES data_source_table, @{activity('Lookup_LastVersion').output.firstRow.SYS_CHANGE_VERSION}) as CT on data_source_table.PersonID = CT.PersonID where CT.SYS_CHANGE_VERSION <= @{activity('Lookup_CurrentVersion').output.firstRow.CurrentChangeTrackingVersion}",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "AzureSqlIncremental_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BlobStoreIncremental",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Change Tracking",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Incrememental Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Update_ChangeTracking_Version]",
							"storedProcedureParameters": {
								"CurrentTrackingVersion": {
									"value": {
										"value": "@{activity('Lookup_CurrentVersion').output.firstRow.CurrentChangeTrackingVersion}",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@{activity('Lookup_LastVersion').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Incremental"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIncremental_Changes')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlIncremental_Data')]",
				"[concat(variables('factoryId'), '/datasets/BlobStoreIncremental')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipe With Vars')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "myarray",
							"value": [
								"abc"
							]
						}
					},
					{
						"name": "Append Variable1",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "myarray",
							"value": "abc"
						}
					}
				],
				"variables": {
					"myarray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "PipelineController"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rule Based Dynamic Column Names1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://kromerbigdata.com/2019/05/24/adf-mapping-data-flows-create-rules-to-modify-column-names/",
				"activities": [
					{
						"name": "Rule Based Dynamic Column Names",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RuleBasedDynamicColumnNames1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/RuleBasedDynamicColumnNames1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCDType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SQLProducts": {},
									"DimProd": {},
									"loadADW": {}
								}
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDType2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Schema Drift Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SchemaDrift",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "schemaDrift2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Drifts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/schemaDrift2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SearchLogAnalytics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a sample that takes the U-SQL SearchLog analytics example and turns it into an ADF Data Flow: https://kromerbigdata.com/2019/03/03/u-sql-searchlog-aggregations-as-adf-data-flows/",
				"activities": [
					{
						"name": "SearchLog",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SearchLog",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"searchLog": {},
									"sinkIntoDW": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SearchLog')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SkipLines')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "wheretostart",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "wheredoesmydatabegin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "myDataFlowCluster",
								"type": "IntegrationRuntimeReference"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "wheretostart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "skiplines.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WriteSkippedRows",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "skipped",
								"type": "DataFlowReference",
								"parameters": {
									"skiplines": {
										"value": "'@{activity('Lookup1').output.firstRow.firstline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"skiplines": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "myDataFlowCluster",
								"type": "IntegrationRuntimeReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/wheredoesmydatabegin')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/', parameters('integrationRuntime_myDataFlowCluster'))]",
				"[concat(variables('factoryId'), '/datasets/folderout')]",
				"[concat(variables('factoryId'), '/dataflows/skipped')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TaxiDemoDataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Baseball 1 Basic Stats",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceBatting": {},
									"sourcePlayer": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Baseball 1 Basic Stats')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalakeCrud')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dedupe",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dedupe')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dynaDelete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow3",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "deleteRows",
								"type": "DataFlowReference",
								"parameters": {
									"movieName": {
										"value": "'@{pipeline().parameters.deletethismovie}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceSQLDatabase": {},
									"deleteRows": {}
								}
							},
							"staging": {}
						}
					}
				],
				"parameters": {
					"deletethismovie": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/deleteRows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fileUpdates')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fileUpdates",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "fileUpdates",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fileUpdates')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/invokedPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyBlobtoBlob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "AzureBlob1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CADOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"sourceBlobContainer": {
						"type": "String"
					},
					"sinkBlobContainer": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PipelineController"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBlob1')]",
				"[concat(variables('factoryId'), '/datasets/CADOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsonPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "moviesCsvToJSON",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "moviesCsvToJSON",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"moviesCSV": {},
									"makeJSON": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "myDataFlowCluster",
								"type": "IntegrationRuntimeReference"
							}
						}
					},
					{
						"name": "ExecuteDataFlow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "moviesCsvToJSON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "moviesCsvToJSON",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"moviesCSV": {},
									"makeJSON": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "myDataFlowCluster",
								"type": "IntegrationRuntimeReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/moviesCsvToJSON')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/', parameters('integrationRuntime_myDataFlowCluster'))]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/masterPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MyExecutePipelineActivity",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "invokedPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourceBlobContainer": {
									"value": "@pipeline().parameters.masterSourceBlobContainer",
									"type": "Expression"
								},
								"sinkBlobCountainer": {
									"value": "@pipeline().parameters.masterSinkBlobContainer",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"masterSourceBlobContainer": {
						"type": "String"
					},
					"masterSinkBlobContainer": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PipelineController"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/invokedPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/paramQueryPipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "paramQuery",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "paramQuery",
								"type": "DataFlowReference",
								"parameters": {
									"prodid": "'706'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/paramQuery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parttest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "partdata",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "partdata",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/partdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline10')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "{1,2,3}",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 120
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "My Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dedupeProb2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceName": {},
									"sinkDupes": {},
									"sinkNoDupes": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dedupeProb2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/processMultipleTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "processMultipleTables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "processMultipleTables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"tablename": "dbo.batting1"
									},
									"sink1": {
										"mytablename": "dbo.batting2"
									}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/processMultipleTables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AppendFiles",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AppendFiles",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesOrig": {},
									"SalesNew": {},
									"SalesUpdate": {},
									"UpdatedOutput": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AppendFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/soccerPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "soccerETL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "soccerETL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"specifySchemaExtracts": {},
									"locationMap": {},
									"SQLDBSink": {}
								}
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/soccerETL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/updateDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dbUpdates",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dbUpdates",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dbUpdates')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/updateRowsPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "updateRows",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "updateRows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					},
					{
						"name": "LoadFromStage",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "updateRows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadFromStage",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageSource": {},
									"sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/updateRows')]",
				"[concat(variables('factoryId'), '/dataflows/LoadFromStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADW_DimProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "ProductKey",
						"type": "Int32"
					},
					{
						"name": "ProductAlternateKey",
						"type": "String"
					},
					{
						"name": "ProductSubcategoryKey",
						"type": "Int32"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "EnglishProductName",
						"type": "String"
					},
					{
						"name": "SpanishProductName",
						"type": "String"
					},
					{
						"name": "FrenchProductName",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "Boolean"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "SafetyStockLevel",
						"type": "Int16"
					},
					{
						"name": "ReorderPoint",
						"type": "Int16"
					},
					{
						"name": "ListPrice",
						"type": "Decimal"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "SizeRange",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "Double"
					},
					{
						"name": "DaysToManufacture",
						"type": "Int32"
					},
					{
						"name": "ProductLine",
						"type": "String"
					},
					{
						"name": "DealerPrice",
						"type": "Decimal"
					},
					{
						"name": "Class",
						"type": "String"
					},
					{
						"name": "Style",
						"type": "String"
					},
					{
						"name": "ModelName",
						"type": "String"
					},
					{
						"name": "EnglishDescription",
						"type": "String"
					},
					{
						"name": "FrenchDescription",
						"type": "String"
					},
					{
						"name": "ChineseDescription",
						"type": "String"
					},
					{
						"name": "ArabicDescription",
						"type": "String"
					},
					{
						"name": "HebrewDescription",
						"type": "String"
					},
					{
						"name": "ThaiDescription",
						"type": "String"
					},
					{
						"name": "GermanDescription",
						"type": "String"
					},
					{
						"name": "JapaneseDescription",
						"type": "String"
					},
					{
						"name": "TurkishDescription",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "DateTime"
					},
					{
						"name": "EndDate",
						"type": "DateTime"
					},
					{
						"name": "Status",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADW_FactSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "OrderTotal",
						"type": "Decimal"
					},
					{
						"name": "RevisionNumber",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "DateTime"
					},
					{
						"name": "DueDate",
						"type": "DateTime"
					},
					{
						"name": "ShipDate",
						"type": "DateTime"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "OnlineOrderFlag",
						"type": "Boolean"
					},
					{
						"name": "SalesOrderNumber",
						"type": "String"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "String"
					},
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "Int32"
					},
					{
						"name": "ShipToAddressID",
						"type": "Int32"
					},
					{
						"name": "BillToAddressID",
						"type": "Int32"
					},
					{
						"name": "ShipMethod",
						"type": "String"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "Decimal"
					},
					{
						"name": "TaxAmt",
						"type": "Decimal"
					},
					{
						"name": "Freight",
						"type": "Decimal"
					},
					{
						"name": "TotalDue",
						"type": "Decimal"
					},
					{
						"name": "Comment",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "FactSales_makromer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/A_G')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Prop_0",
						"type": "DateTime"
					},
					{
						"name": "Prop_1",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('A_G_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('A_G_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Addresses_Blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "AddressID",
						"type": "String"
					},
					{
						"name": "Address1",
						"type": "String"
					},
					{
						"name": "Address2",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Prop_4",
						"type": "String"
					},
					{
						"name": "Prop_5",
						"type": "String"
					},
					{
						"name": "Prop_6",
						"type": "String"
					},
					{
						"name": "Prop_7",
						"type": "String"
					},
					{
						"name": "Prop_8",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": "\t",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('Addresses_Blob_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('Addresses_Blob_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlob1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlob1_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlob1_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlob2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Prop_0",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					},
					{
						"name": "Prop_2",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlob2_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlob2_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlob3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlob3_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlob3_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobBaseballOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlobBaseballOutput_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlobBaseballOutput_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageFile1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlobFSFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureDataLakeStorageFile1_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureDataLakeStorageFile1_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageFile2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlobFSFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureDataLakeStorageFile2_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureDataLakeStorageFile2_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLIncremental_Changes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Incremental"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "TableName",
						"type": "String"
					},
					{
						"name": "SYS_CHANGE_VERSION",
						"type": "Int64"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[table_store_ChangeTracking_version]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "DayOfTheWeek",
						"type": "Int32"
					},
					{
						"name": "trip_distance",
						"type": "Double"
					},
					{
						"name": "passenger_count",
						"type": "Double"
					},
					{
						"name": "trip_time_in_secs",
						"type": "Double"
					},
					{
						"name": "average_fare",
						"type": "Double"
					}
				],
				"typeProperties": {
					"tableName": "templatedemodata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": "batting"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "digit",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Cardinals]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "yearID",
						"type": "Int32"
					},
					{
						"name": "BA",
						"type": "Double"
					},
					{
						"name": "OBP",
						"type": "Double"
					},
					{
						"name": "SLG",
						"type": "Double"
					},
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "birthYear",
						"type": "String"
					},
					{
						"name": "birthMonth",
						"type": "String"
					},
					{
						"name": "birthDay",
						"type": "String"
					},
					{
						"name": "birthCountry",
						"type": "String"
					},
					{
						"name": "birthState",
						"type": "String"
					},
					{
						"name": "birthCity",
						"type": "String"
					},
					{
						"name": "deathYear",
						"type": "String"
					},
					{
						"name": "deathMonth",
						"type": "String"
					},
					{
						"name": "deathDay",
						"type": "String"
					},
					{
						"name": "deathCountry",
						"type": "String"
					},
					{
						"name": "deathState",
						"type": "String"
					},
					{
						"name": "deathCity",
						"type": "String"
					},
					{
						"name": "nameFirst",
						"type": "String"
					},
					{
						"name": "nameLast",
						"type": "String"
					},
					{
						"name": "nameGiven",
						"type": "String"
					},
					{
						"name": "weight",
						"type": "String"
					},
					{
						"name": "height",
						"type": "String"
					},
					{
						"name": "bats",
						"type": "String"
					},
					{
						"name": "throws",
						"type": "String"
					},
					{
						"name": "debut",
						"type": "String"
					},
					{
						"name": "finalGame",
						"type": "String"
					},
					{
						"name": "retroID",
						"type": "String"
					},
					{
						"name": "bbrefID",
						"type": "String"
					},
					{
						"name": "stint",
						"type": "String"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int32"
					},
					{
						"name": "AB",
						"type": "Int32"
					},
					{
						"name": "R",
						"type": "Int32"
					},
					{
						"name": "H",
						"type": "Int32"
					},
					{
						"name": "H2B",
						"type": "Int32"
					},
					{
						"name": "H3B",
						"type": "Int32"
					},
					{
						"name": "HR",
						"type": "Int32"
					},
					{
						"name": "RBI",
						"type": "Int32"
					},
					{
						"name": "SB",
						"type": "Int32"
					},
					{
						"name": "CS",
						"type": "Int32"
					},
					{
						"name": "BB",
						"type": "Int32"
					},
					{
						"name": "SO",
						"type": "Int32"
					},
					{
						"name": "IBB",
						"type": "Int32"
					},
					{
						"name": "HBP",
						"type": "Int32"
					},
					{
						"name": "SH",
						"type": "Int32"
					},
					{
						"name": "SF",
						"type": "Int32"
					},
					{
						"name": "GIDP",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "BattingAvgTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWTable5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"tableName": "normbattingstats2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlIncremental_Data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Incremental"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "PersonID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[data_source_table]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "StateProvince",
						"type": "nvarchar"
					},
					{
						"name": "CountryRegion",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 23
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[Address]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "movieId",
						"type": "Int32"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "junk",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Movies2]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "_Inserted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "_LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DWhash",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"tableName": "dbo.ProdFromSales2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "dbo.DimEmp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "dbo.reverseBatting"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable7')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "dbo.testmovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BaseballADW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": "BaseballBatting"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BaseballBatting')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "yearID",
						"type": "String"
					},
					{
						"name": "stint",
						"type": "String"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "String"
					},
					{
						"name": "AB",
						"type": "String"
					},
					{
						"name": "R",
						"type": "String"
					},
					{
						"name": "H",
						"type": "String"
					},
					{
						"name": "H2B",
						"type": "String"
					},
					{
						"name": "H3B",
						"type": "String"
					},
					{
						"name": "HR",
						"type": "String"
					},
					{
						"name": "RBI",
						"type": "String"
					},
					{
						"name": "SB",
						"type": "String"
					},
					{
						"name": "CS",
						"type": "String"
					},
					{
						"name": "BB",
						"type": "String"
					},
					{
						"name": "SO",
						"type": "String"
					},
					{
						"name": "IBB",
						"type": "String"
					},
					{
						"name": "HBP",
						"type": "String"
					},
					{
						"name": "SH",
						"type": "String"
					},
					{
						"name": "SF",
						"type": "String"
					},
					{
						"name": "GIDP",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('BaseballBatting_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('BaseballBatting_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BattingAvg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "yearID",
						"type": "Int32"
					},
					{
						"name": "BA",
						"type": "Double"
					},
					{
						"name": "OBP",
						"type": "Double"
					},
					{
						"name": "SLG",
						"type": "Double"
					},
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "birthYear",
						"type": "String"
					},
					{
						"name": "birthMonth",
						"type": "String"
					},
					{
						"name": "birthDay",
						"type": "String"
					},
					{
						"name": "birthCountry",
						"type": "String"
					},
					{
						"name": "birthState",
						"type": "String"
					},
					{
						"name": "birthCity",
						"type": "String"
					},
					{
						"name": "deathYear",
						"type": "String"
					},
					{
						"name": "deathMonth",
						"type": "String"
					},
					{
						"name": "deathDay",
						"type": "String"
					},
					{
						"name": "deathCountry",
						"type": "String"
					},
					{
						"name": "deathState",
						"type": "String"
					},
					{
						"name": "deathCity",
						"type": "String"
					},
					{
						"name": "nameFirst",
						"type": "String"
					},
					{
						"name": "nameLast",
						"type": "String"
					},
					{
						"name": "nameGiven",
						"type": "String"
					},
					{
						"name": "weight",
						"type": "String"
					},
					{
						"name": "height",
						"type": "String"
					},
					{
						"name": "bats",
						"type": "String"
					},
					{
						"name": "throws",
						"type": "String"
					},
					{
						"name": "debut",
						"type": "String"
					},
					{
						"name": "finalGame",
						"type": "String"
					},
					{
						"name": "retroID",
						"type": "String"
					},
					{
						"name": "bbrefID",
						"type": "String"
					},
					{
						"name": "stint",
						"type": "String"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int32"
					},
					{
						"name": "AB",
						"type": "Int32"
					},
					{
						"name": "R",
						"type": "Int32"
					},
					{
						"name": "H",
						"type": "Int32"
					},
					{
						"name": "H2B",
						"type": "Int32"
					},
					{
						"name": "H3B",
						"type": "Int32"
					},
					{
						"name": "HR",
						"type": "Int32"
					},
					{
						"name": "RBI",
						"type": "Int32"
					},
					{
						"name": "SB",
						"type": "Int32"
					},
					{
						"name": "CS",
						"type": "Int32"
					},
					{
						"name": "BB",
						"type": "Int32"
					},
					{
						"name": "SO",
						"type": "Int32"
					},
					{
						"name": "IBB",
						"type": "Int32"
					},
					{
						"name": "HBP",
						"type": "Int32"
					},
					{
						"name": "SH",
						"type": "Int32"
					},
					{
						"name": "SF",
						"type": "Int32"
					},
					{
						"name": "GIDP",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "BattingAvgTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BattingSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('BattingSink_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('BattingSink_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobStoreIncremental')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Incremental"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": {
						"value": "[parameters('BlobStoreIncremental_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": "[parameters('BlobStoreIncremental_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CADOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('CADOutput_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('CADOutput_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CADOutput1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output/parts",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbSqlApiCollection1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDb2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"typeProperties": {
					"collectionName": "Items"
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDb2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbSqlApiCollection2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDb2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"typeProperties": {
					"collectionName": "movies"
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDb2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyDatasetCAD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "PreviousConversionRate",
						"type": "Double"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "DateTime1",
						"type": "DateTime"
					},
					{
						"name": "CurrentConversionRate",
						"type": "Double"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": "\t",
						"rowDelimiter": "",
						"nullValue": "",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('CurrencyDatasetCAD_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('CurrencyDatasetCAD_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyDatasetCAD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Currency_CAD.txt",
						"container": "demo"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyDatasetUSD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "PreviousConversionRate",
						"type": "Double"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "DateTime1",
						"type": "DateTime"
					},
					{
						"name": "CurrentConversionRate",
						"type": "Double"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": "\t",
						"rowDelimiter": "",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('CurrencyDatasetUSD_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('CurrencyDatasetUSD_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyDatasetUSD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Currency_USD.txt",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyRates')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "monthly_csv.csv",
						"folderPath": "SampleData",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Value",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyRates1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "monthly_csv.csv",
						"folderPath": "SampleData",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Value",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencySales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "currencysales.csv",
						"folderPath": "SampleData",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SalesID",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencySales1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "currencysales.csv",
						"folderPath": "SampleData",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SalesID",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[Customer]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DBStage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "moviestage"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWSabermetrics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": "Sabermetrics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"region": {
						"type": "String",
						"defaultValue": "southwest"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "20190102 4687 EPC DB-Time Resource Report.csv",
						"folderPath": "customerdata",
						"container": "mycontainer"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Project",
						"type": "String"
					},
					{
						"name": "Activity ID",
						"type": "String"
					},
					{
						"name": "Resource ID",
						"type": "String"
					},
					{
						"name": "Resource Name",
						"type": "String"
					},
					{
						"name": "Actual Units",
						"type": "String"
					},
					{
						"name": "At Completion Units",
						"type": "String"
					},
					{
						"name": "Budgeted Units",
						"type": "String"
					},
					{
						"name": "Unit State",
						"type": "String"
					},
					{
						"name": "29-Jun-15",
						"type": "String"
					},
					{
						"name": "06-Jul-15",
						"type": "String"
					},
					{
						"name": "13-Jul-15",
						"type": "String"
					},
					{
						"name": "20-Jul-15",
						"type": "String"
					},
					{
						"name": "27-Jul-15",
						"type": "String"
					},
					{
						"name": "03-Aug-15",
						"type": "String"
					},
					{
						"name": "10-Aug-15",
						"type": "String"
					},
					{
						"name": "17-Aug-15",
						"type": "String"
					},
					{
						"name": "24-Aug-15",
						"type": "String"
					},
					{
						"name": "31-Aug-15",
						"type": "String"
					},
					{
						"name": "07-Sep-15",
						"type": "String"
					},
					{
						"name": "14-Sep-15",
						"type": "String"
					},
					{
						"name": "21-Sep-15",
						"type": "String"
					},
					{
						"name": "28-Sep-15",
						"type": "String"
					},
					{
						"name": "05-Oct-15",
						"type": "String"
					},
					{
						"name": "12-Oct-15",
						"type": "String"
					},
					{
						"name": "19-Oct-15",
						"type": "String"
					},
					{
						"name": "26-Oct-15",
						"type": "String"
					},
					{
						"name": "02-Nov-15",
						"type": "String"
					},
					{
						"name": "09-Nov-15",
						"type": "String"
					},
					{
						"name": "16-Nov-15",
						"type": "String"
					},
					{
						"name": "23-Nov-15",
						"type": "String"
					},
					{
						"name": "30-Nov-15",
						"type": "String"
					},
					{
						"name": "07-Dec-15",
						"type": "String"
					},
					{
						"name": "14-Dec-15",
						"type": "String"
					},
					{
						"name": "21-Dec-15",
						"type": "String"
					},
					{
						"name": "28-Dec-15",
						"type": "String"
					},
					{
						"name": "04-Jan-16",
						"type": "String"
					},
					{
						"name": "11-Jan-16",
						"type": "String"
					},
					{
						"name": "18-Jan-16",
						"type": "String"
					},
					{
						"name": "25-Jan-16",
						"type": "String"
					},
					{
						"name": "01-Feb-16",
						"type": "String"
					},
					{
						"name": "08-Feb-16",
						"type": "String"
					},
					{
						"name": "15-Feb-16",
						"type": "String"
					},
					{
						"name": "22-Feb-16",
						"type": "String"
					},
					{
						"name": "29-Feb-16",
						"type": "String"
					},
					{
						"name": "07-Mar-16",
						"type": "String"
					},
					{
						"name": "14-Mar-16",
						"type": "String"
					},
					{
						"name": "21-Mar-16",
						"type": "String"
					},
					{
						"name": "28-Mar-16",
						"type": "String"
					},
					{
						"name": "04-Apr-16",
						"type": "String"
					},
					{
						"name": "11-Apr-16",
						"type": "String"
					},
					{
						"name": "18-Apr-16",
						"type": "String"
					},
					{
						"name": "25-Apr-16",
						"type": "String"
					},
					{
						"name": "02-May-16",
						"type": "String"
					},
					{
						"name": "09-May-16",
						"type": "String"
					},
					{
						"name": "16-May-16",
						"type": "String"
					},
					{
						"name": "23-May-16",
						"type": "String"
					},
					{
						"name": "30-May-16",
						"type": "String"
					},
					{
						"name": "06-Jun-16",
						"type": "String"
					},
					{
						"name": "13-Jun-16",
						"type": "String"
					},
					{
						"name": "20-Jun-16",
						"type": "String"
					},
					{
						"name": "27-Jun-16",
						"type": "String"
					},
					{
						"name": "04-Jul-16",
						"type": "String"
					},
					{
						"name": "11-Jul-16",
						"type": "String"
					},
					{
						"name": "18-Jul-16",
						"type": "String"
					},
					{
						"name": "25-Jul-16",
						"type": "String"
					},
					{
						"name": "01-Aug-16",
						"type": "String"
					},
					{
						"name": "08-Aug-16",
						"type": "String"
					},
					{
						"name": "15-Aug-16",
						"type": "String"
					},
					{
						"name": "22-Aug-16",
						"type": "String"
					},
					{
						"name": "29-Aug-16",
						"type": "String"
					},
					{
						"name": "05-Sep-16",
						"type": "String"
					},
					{
						"name": "12-Sep-16",
						"type": "String"
					},
					{
						"name": "19-Sep-16",
						"type": "String"
					},
					{
						"name": "26-Sep-16",
						"type": "String"
					},
					{
						"name": "03-Oct-16",
						"type": "String"
					},
					{
						"name": "10-Oct-16",
						"type": "String"
					},
					{
						"name": "17-Oct-16",
						"type": "String"
					},
					{
						"name": "24-Oct-16",
						"type": "String"
					},
					{
						"name": "31-Oct-16",
						"type": "String"
					},
					{
						"name": "07-Nov-16",
						"type": "String"
					},
					{
						"name": "14-Nov-16",
						"type": "String"
					},
					{
						"name": "21-Nov-16",
						"type": "String"
					},
					{
						"name": "28-Nov-16",
						"type": "String"
					},
					{
						"name": "05-Dec-16",
						"type": "String"
					},
					{
						"name": "12-Dec-16",
						"type": "String"
					},
					{
						"name": "19-Dec-16",
						"type": "String"
					},
					{
						"name": "26-Dec-16",
						"type": "String"
					},
					{
						"name": "02-Jan-17",
						"type": "String"
					},
					{
						"name": "09-Jan-17",
						"type": "String"
					},
					{
						"name": "16-Jan-17",
						"type": "String"
					},
					{
						"name": "23-Jan-17",
						"type": "String"
					},
					{
						"name": "30-Jan-17",
						"type": "String"
					},
					{
						"name": "06-Feb-17",
						"type": "String"
					},
					{
						"name": "13-Feb-17",
						"type": "String"
					},
					{
						"name": "20-Feb-17",
						"type": "String"
					},
					{
						"name": "27-Feb-17",
						"type": "String"
					},
					{
						"name": "06-Mar-17",
						"type": "String"
					},
					{
						"name": "13-Mar-17",
						"type": "String"
					},
					{
						"name": "20-Mar-17",
						"type": "String"
					},
					{
						"name": "27-Mar-17",
						"type": "String"
					},
					{
						"name": "03-Apr-17",
						"type": "String"
					},
					{
						"name": "10-Apr-17",
						"type": "String"
					},
					{
						"name": "17-Apr-17",
						"type": "String"
					},
					{
						"name": "24-Apr-17",
						"type": "String"
					},
					{
						"name": "01-May-17",
						"type": "String"
					},
					{
						"name": "08-May-17",
						"type": "String"
					},
					{
						"name": "15-May-17",
						"type": "String"
					},
					{
						"name": "22-May-17",
						"type": "String"
					},
					{
						"name": "29-May-17",
						"type": "String"
					},
					{
						"name": "05-Jun-17",
						"type": "String"
					},
					{
						"name": "12-Jun-17",
						"type": "String"
					},
					{
						"name": "19-Jun-17",
						"type": "String"
					},
					{
						"name": "26-Jun-17",
						"type": "String"
					},
					{
						"name": "03-Jul-17",
						"type": "String"
					},
					{
						"name": "10-Jul-17",
						"type": "String"
					},
					{
						"name": "17-Jul-17",
						"type": "String"
					},
					{
						"name": "24-Jul-17",
						"type": "String"
					},
					{
						"name": "31-Jul-17",
						"type": "String"
					},
					{
						"name": "07-Aug-17",
						"type": "String"
					},
					{
						"name": "14-Aug-17",
						"type": "String"
					},
					{
						"name": "21-Aug-17",
						"type": "String"
					},
					{
						"name": "28-Aug-17",
						"type": "String"
					},
					{
						"name": "04-Sep-17",
						"type": "String"
					},
					{
						"name": "11-Sep-17",
						"type": "String"
					},
					{
						"name": "18-Sep-17",
						"type": "String"
					},
					{
						"name": "25-Sep-17",
						"type": "String"
					},
					{
						"name": "02-Oct-17",
						"type": "String"
					},
					{
						"name": "09-Oct-17",
						"type": "String"
					},
					{
						"name": "16-Oct-17",
						"type": "String"
					},
					{
						"name": "23-Oct-17",
						"type": "String"
					},
					{
						"name": "30-Oct-17",
						"type": "String"
					},
					{
						"name": "06-Nov-17",
						"type": "String"
					},
					{
						"name": "13-Nov-17",
						"type": "String"
					},
					{
						"name": "20-Nov-17",
						"type": "String"
					},
					{
						"name": "27-Nov-17",
						"type": "String"
					},
					{
						"name": "04-Dec-17",
						"type": "String"
					},
					{
						"name": "11-Dec-17",
						"type": "String"
					},
					{
						"name": "18-Dec-17",
						"type": "String"
					},
					{
						"name": "25-Dec-17",
						"type": "String"
					},
					{
						"name": "01-Jan-18",
						"type": "String"
					},
					{
						"name": "08-Jan-18",
						"type": "String"
					},
					{
						"name": "15-Jan-18",
						"type": "String"
					},
					{
						"name": "22-Jan-18",
						"type": "String"
					},
					{
						"name": "29-Jan-18",
						"type": "String"
					},
					{
						"name": "05-Feb-18",
						"type": "String"
					},
					{
						"name": "12-Feb-18",
						"type": "String"
					},
					{
						"name": "19-Feb-18",
						"type": "String"
					},
					{
						"name": "26-Feb-18",
						"type": "String"
					},
					{
						"name": "05-Mar-18",
						"type": "String"
					},
					{
						"name": "12-Mar-18",
						"type": "String"
					},
					{
						"name": "19-Mar-18",
						"type": "String"
					},
					{
						"name": "26-Mar-18",
						"type": "String"
					},
					{
						"name": "02-Apr-18",
						"type": "String"
					},
					{
						"name": "09-Apr-18",
						"type": "String"
					},
					{
						"name": "16-Apr-18",
						"type": "String"
					},
					{
						"name": "23-Apr-18",
						"type": "String"
					},
					{
						"name": "30-Apr-18",
						"type": "String"
					},
					{
						"name": "07-May-18",
						"type": "String"
					},
					{
						"name": "14-May-18",
						"type": "String"
					},
					{
						"name": "21-May-18",
						"type": "String"
					},
					{
						"name": "28-May-18",
						"type": "String"
					},
					{
						"name": "04-Jun-18",
						"type": "String"
					},
					{
						"name": "11-Jun-18",
						"type": "String"
					},
					{
						"name": "18-Jun-18",
						"type": "String"
					},
					{
						"name": "25-Jun-18",
						"type": "String"
					},
					{
						"name": "02-Jul-18",
						"type": "String"
					},
					{
						"name": "09-Jul-18",
						"type": "String"
					},
					{
						"name": "16-Jul-18",
						"type": "String"
					},
					{
						"name": "23-Jul-18",
						"type": "String"
					},
					{
						"name": "30-Jul-18",
						"type": "String"
					},
					{
						"name": "06-Aug-18",
						"type": "String"
					},
					{
						"name": "13-Aug-18",
						"type": "String"
					},
					{
						"name": "20-Aug-18",
						"type": "String"
					},
					{
						"name": "27-Aug-18",
						"type": "String"
					},
					{
						"name": "03-Sep-18",
						"type": "String"
					},
					{
						"name": "10-Sep-18",
						"type": "String"
					},
					{
						"name": "17-Sep-18",
						"type": "String"
					},
					{
						"name": "24-Sep-18",
						"type": "String"
					},
					{
						"name": "01-Oct-18",
						"type": "String"
					},
					{
						"name": "08-Oct-18",
						"type": "String"
					},
					{
						"name": "15-Oct-18",
						"type": "String"
					},
					{
						"name": "22-Oct-18",
						"type": "String"
					},
					{
						"name": "29-Oct-18",
						"type": "String"
					},
					{
						"name": "05-Nov-18",
						"type": "String"
					},
					{
						"name": "12-Nov-18",
						"type": "String"
					},
					{
						"name": "19-Nov-18",
						"type": "String"
					},
					{
						"name": "26-Nov-18",
						"type": "String"
					},
					{
						"name": "03-Dec-18",
						"type": "String"
					},
					{
						"name": "10-Dec-18",
						"type": "String"
					},
					{
						"name": "17-Dec-18",
						"type": "String"
					},
					{
						"name": "24-Dec-18",
						"type": "String"
					},
					{
						"name": "31-Dec-18",
						"type": "String"
					},
					{
						"name": "07-Jan-19",
						"type": "String"
					},
					{
						"name": "14-Jan-19",
						"type": "String"
					},
					{
						"name": "21-Jan-19",
						"type": "String"
					},
					{
						"name": "28-Jan-19",
						"type": "String"
					},
					{
						"name": "04-Feb-19",
						"type": "String"
					},
					{
						"name": "11-Feb-19",
						"type": "String"
					},
					{
						"name": "18-Feb-19",
						"type": "String"
					},
					{
						"name": "25-Feb-19",
						"type": "String"
					},
					{
						"name": "04-Mar-19",
						"type": "String"
					},
					{
						"name": "11-Mar-19",
						"type": "String"
					},
					{
						"name": "18-Mar-19",
						"type": "String"
					},
					{
						"name": "25-Mar-19",
						"type": "String"
					},
					{
						"name": "01-Apr-19",
						"type": "String"
					},
					{
						"name": "08-Apr-19",
						"type": "String"
					},
					{
						"name": "15-Apr-19",
						"type": "String"
					},
					{
						"name": "22-Apr-19",
						"type": "String"
					},
					{
						"name": "29-Apr-19",
						"type": "String"
					},
					{
						"name": "06-May-19",
						"type": "String"
					},
					{
						"name": "13-May-19",
						"type": "String"
					},
					{
						"name": "20-May-19",
						"type": "String"
					},
					{
						"name": "27-May-19",
						"type": "String"
					},
					{
						"name": "03-Jun-19",
						"type": "String"
					},
					{
						"name": "10-Jun-19",
						"type": "String"
					},
					{
						"name": "17-Jun-19",
						"type": "String"
					},
					{
						"name": "24-Jun-19",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText10')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "SampleData/HR",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText11')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage3",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "dataset().filename",
							"type": "Expression"
						},
						"folderPath": "myfolder",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"myparam": {
						"type": "String",
						"defaultValue": "stuff"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "params.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "_c0",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"myfile": {
						"type": "String",
						"defaultValue": "Address.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().myfile",
							"type": "Expression"
						},
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "_c0",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Currency_ARS.txt",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText7')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employee2.csv",
						"folderPath": "myfolder",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "member_id",
						"type": "String"
					},
					{
						"name": "loan_amnt",
						"type": "String"
					},
					{
						"name": "funded_amnt",
						"type": "String"
					},
					{
						"name": "funded_amnt_inv",
						"type": "String"
					},
					{
						"name": "term",
						"type": "String"
					},
					{
						"name": "int_rate",
						"type": "String"
					},
					{
						"name": "installment",
						"type": "String"
					},
					{
						"name": "grade",
						"type": "String"
					},
					{
						"name": "sub_grade",
						"type": "String"
					},
					{
						"name": "emp_title",
						"type": "String"
					},
					{
						"name": "emp_length",
						"type": "String"
					},
					{
						"name": "home_ownership",
						"type": "String"
					},
					{
						"name": "annual_inc",
						"type": "String"
					},
					{
						"name": "verification_status",
						"type": "String"
					},
					{
						"name": "issue_d",
						"type": "String"
					},
					{
						"name": "loan_status",
						"type": "String"
					},
					{
						"name": "pymnt_plan",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					},
					{
						"name": "desc",
						"type": "String"
					},
					{
						"name": "purpose",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "zip_code",
						"type": "String"
					},
					{
						"name": "addr_state",
						"type": "String"
					},
					{
						"name": "dti",
						"type": "String"
					},
					{
						"name": "delinq_2yrs",
						"type": "String"
					},
					{
						"name": "earliest_cr_line",
						"type": "String"
					},
					{
						"name": "inq_last_6mths",
						"type": "String"
					},
					{
						"name": "mths_since_last_delinq",
						"type": "String"
					},
					{
						"name": "mths_since_last_record",
						"type": "String"
					},
					{
						"name": "open_acc",
						"type": "String"
					},
					{
						"name": "pub_rec",
						"type": "String"
					},
					{
						"name": "revol_bal",
						"type": "String"
					},
					{
						"name": "revol_util",
						"type": "String"
					},
					{
						"name": "total_acc",
						"type": "String"
					},
					{
						"name": "initial_list_status",
						"type": "String"
					},
					{
						"name": "out_prncp",
						"type": "String"
					},
					{
						"name": "out_prncp_inv",
						"type": "String"
					},
					{
						"name": "total_pymnt",
						"type": "String"
					},
					{
						"name": "total_pymnt_inv",
						"type": "String"
					},
					{
						"name": "total_rec_prncp",
						"type": "String"
					},
					{
						"name": "total_rec_int",
						"type": "String"
					},
					{
						"name": "total_rec_late_fee",
						"type": "String"
					},
					{
						"name": "recoveries",
						"type": "String"
					},
					{
						"name": "collection_recovery_fee",
						"type": "String"
					},
					{
						"name": "last_pymnt_d",
						"type": "String"
					},
					{
						"name": "last_pymnt_amnt",
						"type": "String"
					},
					{
						"name": "next_pymnt_d",
						"type": "String"
					},
					{
						"name": "last_credit_pull_d",
						"type": "String"
					},
					{
						"name": "collections_12_mths_ex_med",
						"type": "String"
					},
					{
						"name": "mths_since_last_major_derog",
						"type": "String"
					},
					{
						"name": "policy_code",
						"type": "String"
					},
					{
						"name": "application_type",
						"type": "String"
					},
					{
						"name": "annual_inc_joint",
						"type": "String"
					},
					{
						"name": "dti_joint",
						"type": "String"
					},
					{
						"name": "verification_status_joint",
						"type": "String"
					},
					{
						"name": "acc_now_delinq",
						"type": "String"
					},
					{
						"name": "tot_coll_amt",
						"type": "String"
					},
					{
						"name": "tot_cur_bal",
						"type": "String"
					},
					{
						"name": "open_acc_6m",
						"type": "String"
					},
					{
						"name": "open_il_6m",
						"type": "String"
					},
					{
						"name": "open_il_12m",
						"type": "String"
					},
					{
						"name": "open_il_24m",
						"type": "String"
					},
					{
						"name": "mths_since_rcnt_il",
						"type": "String"
					},
					{
						"name": "total_bal_il",
						"type": "String"
					},
					{
						"name": "il_util",
						"type": "String"
					},
					{
						"name": "open_rv_12m",
						"type": "String"
					},
					{
						"name": "open_rv_24m",
						"type": "String"
					},
					{
						"name": "max_bal_bc",
						"type": "String"
					},
					{
						"name": "all_util",
						"type": "String"
					},
					{
						"name": "total_rev_hi_lim",
						"type": "String"
					},
					{
						"name": "inq_fi",
						"type": "String"
					},
					{
						"name": "total_cu_tl",
						"type": "String"
					},
					{
						"name": "inq_last_12m",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText9')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "SampleData/HR",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoSinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('DemoSinkDataset_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DemoSinkDataset_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_5ra')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlobFSFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('DestinationDataset_5ra_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_5ra_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_cce')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('DestinationDataset_cce_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_cce_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_d2r')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "ParquetFormat"
					},
					"fileName": "[parameters('DestinationDataset_d2r_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_d2r_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_hii')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('DestinationDataset_hii_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_hii_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogatekey",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "EmpFunction",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Role",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "iscurrent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "processtime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DimEmp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmp1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogatekey",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "EmpFunction",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Role",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "iscurrent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "processtime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DimEmp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmp2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogatekey",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "EmpFunction",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Role",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "iscurrent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "processtime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DimEmp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "RegionCode",
						"type": "String"
					},
					{
						"name": "StatusCode",
						"type": "String"
					},
					{
						"name": "FunctionCode",
						"type": "String"
					},
					{
						"name": "GradeLevel",
						"type": "String"
					},
					{
						"name": "RoleCode",
						"type": "String"
					},
					{
						"name": "StartDt",
						"type": "String"
					},
					{
						"name": "EndDt",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "DimEmployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmployee2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "[[dbo].[DimEmployee]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "ProductKey",
						"type": "Int32"
					},
					{
						"name": "ProductAlternateKey",
						"type": "String"
					},
					{
						"name": "ProductSubcategoryKey",
						"type": "Int32"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "EnglishProductName",
						"type": "String"
					},
					{
						"name": "SpanishProductName",
						"type": "String"
					},
					{
						"name": "FrenchProductName",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "Boolean"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "SafetyStockLevel",
						"type": "Int16"
					},
					{
						"name": "ReorderPoint",
						"type": "Int16"
					},
					{
						"name": "ListPrice",
						"type": "Decimal"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "SizeRange",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "Double"
					},
					{
						"name": "DaysToManufacture",
						"type": "Int32"
					},
					{
						"name": "ProductLine",
						"type": "String"
					},
					{
						"name": "DealerPrice",
						"type": "Decimal"
					},
					{
						"name": "Class",
						"type": "String"
					},
					{
						"name": "Style",
						"type": "String"
					},
					{
						"name": "ModelName",
						"type": "String"
					},
					{
						"name": "EnglishDescription",
						"type": "String"
					},
					{
						"name": "FrenchDescription",
						"type": "String"
					},
					{
						"name": "ChineseDescription",
						"type": "String"
					},
					{
						"name": "ArabicDescription",
						"type": "String"
					},
					{
						"name": "HebrewDescription",
						"type": "String"
					},
					{
						"name": "ThaiDescription",
						"type": "String"
					},
					{
						"name": "GermanDescription",
						"type": "String"
					},
					{
						"name": "JapaneseDescription",
						"type": "String"
					},
					{
						"name": "TurkishDescription",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "DateTime"
					},
					{
						"name": "EndDate",
						"type": "DateTime"
					},
					{
						"name": "Status",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProd_New')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ProductKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "ProductSubcategoryKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "EnglishProductName",
						"type": "nvarchar"
					},
					{
						"name": "SpanishProductName",
						"type": "nvarchar"
					},
					{
						"name": "FrenchProductName",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeRange",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "DealerPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ModelName",
						"type": "nvarchar"
					},
					{
						"name": "EnglishDescription",
						"type": "nvarchar"
					},
					{
						"name": "FrenchDescription",
						"type": "nvarchar"
					},
					{
						"name": "ChineseDescription",
						"type": "nvarchar"
					},
					{
						"name": "ArabicDescription",
						"type": "nvarchar"
					},
					{
						"name": "HebrewDescription",
						"type": "nvarchar"
					},
					{
						"name": "ThaiDescription",
						"type": "nvarchar"
					},
					{
						"name": "GermanDescription",
						"type": "nvarchar"
					},
					{
						"name": "JapaneseDescription",
						"type": "nvarchar"
					},
					{
						"name": "TurkishDescription",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"tableName": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProducts_new')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ProductKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "ProductSubcategoryKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "EnglishProductName",
						"type": "nvarchar"
					},
					{
						"name": "SpanishProductName",
						"type": "nvarchar"
					},
					{
						"name": "FrenchProductName",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeRange",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "DealerPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ModelName",
						"type": "nvarchar"
					},
					{
						"name": "EnglishDescription",
						"type": "nvarchar"
					},
					{
						"name": "FrenchDescription",
						"type": "nvarchar"
					},
					{
						"name": "ChineseDescription",
						"type": "nvarchar"
					},
					{
						"name": "ArabicDescription",
						"type": "nvarchar"
					},
					{
						"name": "HebrewDescription",
						"type": "nvarchar"
					},
					{
						"name": "ThaiDescription",
						"type": "nvarchar"
					},
					{
						"name": "GermanDescription",
						"type": "nvarchar"
					},
					{
						"name": "JapaneseDescription",
						"type": "nvarchar"
					},
					{
						"name": "TurkishDescription",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"tableName": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeDay1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeDay1.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "RegionCode",
						"type": "String"
					},
					{
						"name": "StatusCode",
						"type": "String"
					},
					{
						"name": "FunctionCode",
						"type": "String"
					},
					{
						"name": "GradeLevel",
						"type": "String"
					},
					{
						"name": "RoleCode",
						"type": "String"
					},
					{
						"name": "StartDt",
						"type": "String"
					},
					{
						"name": "EndDt",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeDay2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeDay2.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "RegionCode",
						"type": "String"
					},
					{
						"name": "StatusCode",
						"type": "String"
					},
					{
						"name": "FunctionCode",
						"type": "String"
					},
					{
						"name": "GradeLevel",
						"type": "String"
					},
					{
						"name": "RoleCode",
						"type": "String"
					},
					{
						"name": "StartDt",
						"type": "String"
					},
					{
						"name": "EndDt",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Function",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Role",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "String"
					},
					{
						"name": "EndDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "dbo.FactTable2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactTable21')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "dbo.FactTable2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Facts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "employeeID",
						"type": "String"
					},
					{
						"name": "Hours",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					},
					{
						"name": "ProjDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Facts1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "employeeID",
						"type": "String"
					},
					{
						"name": "Hours",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					},
					{
						"name": "ProjDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/H_P')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('H_P_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('H_P_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JSONMoviesWithSchema')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movies.json",
						"folderPath": "output/json",
						"container": "mycontainer"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"movies": {
							"type": "object",
							"properties": {
								"genres": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"movieid": {
									"type": "string"
								},
								"rating": {
									"type": "string"
								},
								"title": {
									"type": "string"
								},
								"year": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "mycontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "filelist.json",
						"container": "mycontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadFacts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "dbo.SalesFacts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadFacts2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "dbo.FactTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Loans')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "loan.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "member_id",
						"type": "String"
					},
					{
						"name": "loan_amnt",
						"type": "String"
					},
					{
						"name": "funded_amnt",
						"type": "String"
					},
					{
						"name": "funded_amnt_inv",
						"type": "String"
					},
					{
						"name": "term",
						"type": "String"
					},
					{
						"name": "int_rate",
						"type": "String"
					},
					{
						"name": "installment",
						"type": "String"
					},
					{
						"name": "grade",
						"type": "String"
					},
					{
						"name": "sub_grade",
						"type": "String"
					},
					{
						"name": "emp_title",
						"type": "String"
					},
					{
						"name": "emp_length",
						"type": "String"
					},
					{
						"name": "home_ownership",
						"type": "String"
					},
					{
						"name": "annual_inc",
						"type": "String"
					},
					{
						"name": "verification_status",
						"type": "String"
					},
					{
						"name": "issue_d",
						"type": "String"
					},
					{
						"name": "loan_status",
						"type": "String"
					},
					{
						"name": "pymnt_plan",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					},
					{
						"name": "desc",
						"type": "String"
					},
					{
						"name": "purpose",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "zip_code",
						"type": "String"
					},
					{
						"name": "addr_state",
						"type": "String"
					},
					{
						"name": "dti",
						"type": "String"
					},
					{
						"name": "delinq_2yrs",
						"type": "String"
					},
					{
						"name": "earliest_cr_line",
						"type": "String"
					},
					{
						"name": "inq_last_6mths",
						"type": "String"
					},
					{
						"name": "mths_since_last_delinq",
						"type": "String"
					},
					{
						"name": "mths_since_last_record",
						"type": "String"
					},
					{
						"name": "open_acc",
						"type": "String"
					},
					{
						"name": "pub_rec",
						"type": "String"
					},
					{
						"name": "revol_bal",
						"type": "String"
					},
					{
						"name": "revol_util",
						"type": "String"
					},
					{
						"name": "total_acc",
						"type": "String"
					},
					{
						"name": "initial_list_status",
						"type": "String"
					},
					{
						"name": "out_prncp",
						"type": "String"
					},
					{
						"name": "out_prncp_inv",
						"type": "String"
					},
					{
						"name": "total_pymnt",
						"type": "String"
					},
					{
						"name": "total_pymnt_inv",
						"type": "String"
					},
					{
						"name": "total_rec_prncp",
						"type": "String"
					},
					{
						"name": "total_rec_int",
						"type": "String"
					},
					{
						"name": "total_rec_late_fee",
						"type": "String"
					},
					{
						"name": "recoveries",
						"type": "String"
					},
					{
						"name": "collection_recovery_fee",
						"type": "String"
					},
					{
						"name": "last_pymnt_d",
						"type": "String"
					},
					{
						"name": "last_pymnt_amnt",
						"type": "String"
					},
					{
						"name": "next_pymnt_d",
						"type": "String"
					},
					{
						"name": "last_credit_pull_d",
						"type": "String"
					},
					{
						"name": "collections_12_mths_ex_med",
						"type": "String"
					},
					{
						"name": "mths_since_last_major_derog",
						"type": "String"
					},
					{
						"name": "policy_code",
						"type": "String"
					},
					{
						"name": "application_type",
						"type": "String"
					},
					{
						"name": "annual_inc_joint",
						"type": "String"
					},
					{
						"name": "dti_joint",
						"type": "String"
					},
					{
						"name": "verification_status_joint",
						"type": "String"
					},
					{
						"name": "acc_now_delinq",
						"type": "String"
					},
					{
						"name": "tot_coll_amt",
						"type": "String"
					},
					{
						"name": "tot_cur_bal",
						"type": "String"
					},
					{
						"name": "open_acc_6m",
						"type": "String"
					},
					{
						"name": "open_il_6m",
						"type": "String"
					},
					{
						"name": "open_il_12m",
						"type": "String"
					},
					{
						"name": "open_il_24m",
						"type": "String"
					},
					{
						"name": "mths_since_rcnt_il",
						"type": "String"
					},
					{
						"name": "total_bal_il",
						"type": "String"
					},
					{
						"name": "il_util",
						"type": "String"
					},
					{
						"name": "open_rv_12m",
						"type": "String"
					},
					{
						"name": "open_rv_24m",
						"type": "String"
					},
					{
						"name": "max_bal_bc",
						"type": "String"
					},
					{
						"name": "all_util",
						"type": "String"
					},
					{
						"name": "total_rev_hi_lim",
						"type": "String"
					},
					{
						"name": "inq_fi",
						"type": "String"
					},
					{
						"name": "total_cu_tl",
						"type": "String"
					},
					{
						"name": "inq_last_12m",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesD2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDBDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('MoviesDBDataset_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('MoviesDBDataset_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ratingByYear",
						"type": "float",
						"precision": 15
					},
					{
						"name": "yearkey",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[moviesdw]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output/json",
						"container": "mycontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesSQLDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "movie",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "genres",
						"type": "nvarchar"
					},
					{
						"name": "year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Rating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Rotton Tomato",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dateOfETL",
						"type": "date"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[moviestage]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesWithRatings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "movie",
						"type": "int",
						"precision": 10
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "genres",
						"type": "nvarchar"
					},
					{
						"name": "year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Rating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Rotton Tomato",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[MoviesWithRatings]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NormDWBattingStats_New')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "yearID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BA",
						"type": "float",
						"precision": 15
					},
					{
						"name": "OBP",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SLG",
						"type": "float",
						"precision": 15
					},
					{
						"name": "playerID",
						"type": "nvarchar"
					},
					{
						"name": "birthYear",
						"type": "nvarchar"
					},
					{
						"name": "birthMonth",
						"type": "nvarchar"
					},
					{
						"name": "birthDay",
						"type": "nvarchar"
					},
					{
						"name": "birthCountry",
						"type": "nvarchar"
					},
					{
						"name": "birthState",
						"type": "nvarchar"
					},
					{
						"name": "birthCity",
						"type": "nvarchar"
					},
					{
						"name": "deathYear",
						"type": "nvarchar"
					},
					{
						"name": "deathMonth",
						"type": "nvarchar"
					},
					{
						"name": "deathDay",
						"type": "nvarchar"
					},
					{
						"name": "deathCountry",
						"type": "nvarchar"
					},
					{
						"name": "deathState",
						"type": "nvarchar"
					},
					{
						"name": "deathCity",
						"type": "nvarchar"
					},
					{
						"name": "nameFirst",
						"type": "nvarchar"
					},
					{
						"name": "nameLast",
						"type": "nvarchar"
					},
					{
						"name": "nameGiven",
						"type": "nvarchar"
					},
					{
						"name": "weight",
						"type": "nvarchar"
					},
					{
						"name": "height",
						"type": "nvarchar"
					},
					{
						"name": "bats",
						"type": "nvarchar"
					},
					{
						"name": "throws",
						"type": "nvarchar"
					},
					{
						"name": "debut",
						"type": "nvarchar"
					},
					{
						"name": "finalGame",
						"type": "nvarchar"
					},
					{
						"name": "retroID",
						"type": "nvarchar"
					},
					{
						"name": "bbrefID",
						"type": "nvarchar"
					},
					{
						"name": "stint",
						"type": "nvarchar"
					},
					{
						"name": "teamID",
						"type": "nvarchar"
					},
					{
						"name": "lgID",
						"type": "nvarchar"
					},
					{
						"name": "G",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AB",
						"type": "int",
						"precision": 10
					},
					{
						"name": "R",
						"type": "int",
						"precision": 10
					},
					{
						"name": "H",
						"type": "int",
						"precision": 10
					},
					{
						"name": "H2B",
						"type": "int",
						"precision": 10
					},
					{
						"name": "H3B",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RBI",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SB",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BB",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IBB",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HBP",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SH",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SF",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GIDP",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"tableName": "NormBattingStats"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputContainer1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParamDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParqFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "userdata1.parquet",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "registration_dttm",
						"type": "INT96"
					},
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "first_name",
						"type": "UTF8"
					},
					{
						"name": "last_name",
						"type": "UTF8"
					},
					{
						"name": "email",
						"type": "UTF8"
					},
					{
						"name": "gender",
						"type": "UTF8"
					},
					{
						"name": "ip_address",
						"type": "UTF8"
					},
					{
						"name": "cc",
						"type": "UTF8"
					},
					{
						"name": "country",
						"type": "UTF8"
					},
					{
						"name": "birthdate",
						"type": "UTF8"
					},
					{
						"name": "salary",
						"type": "DOUBLE"
					},
					{
						"name": "title",
						"type": "UTF8"
					},
					{
						"name": "comments",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetCrudOutput1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ParquetCrud"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquetCrud/output",
						"fileSystem": "sample-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK",
						"type": "INT32"
					},
					{
						"name": "col1",
						"type": "UTF8"
					},
					{
						"name": "col2",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetInput1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ParquetCrud"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquetCrud/input/tables",
						"fileSystem": "sample-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK",
						"type": "INT32"
					},
					{
						"name": "col1",
						"type": "UTF8"
					},
					{
						"name": "col2",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesoutnew.parquet",
						"folderPath": "SampleData/movies",
						"container": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "movie",
						"type": "INT32"
					},
					{
						"name": "title",
						"type": "UTF8"
					},
					{
						"name": "genres",
						"type": "UTF8"
					},
					{
						"name": "year",
						"type": "INT32"
					},
					{
						"name": "Rating",
						"type": "INT32"
					},
					{
						"name": "RottenTomato",
						"type": "INT32"
					},
					{
						"name": "dateOfETL",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output/parquet",
						"container": "mycontainer"
					},
					"compressionCodec": "none"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetPart')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "MovieIdDupe",
						"type": "INT32"
					},
					{
						"name": "ActionDupe",
						"type": "UTF8"
					},
					{
						"name": "MovieId",
						"type": "INT32"
					},
					{
						"name": "Title",
						"type": "UTF8"
					},
					{
						"name": "Genre",
						"type": "UTF8"
					},
					{
						"name": "Year",
						"type": "INT32"
					},
					{
						"name": "Rating",
						"type": "INT32"
					},
					{
						"name": "RottenTom",
						"type": "INT32"
					},
					{
						"name": "Action",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetStage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output/DWstaging",
						"container": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PlayersBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BaseballLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "birthYear",
						"type": "String"
					},
					{
						"name": "birthMonth",
						"type": "String"
					},
					{
						"name": "birthDay",
						"type": "String"
					},
					{
						"name": "birthCountry",
						"type": "String"
					},
					{
						"name": "birthState",
						"type": "String"
					},
					{
						"name": "birthCity",
						"type": "String"
					},
					{
						"name": "deathYear",
						"type": "String"
					},
					{
						"name": "deathMonth",
						"type": "String"
					},
					{
						"name": "deathDay",
						"type": "String"
					},
					{
						"name": "deathCountry",
						"type": "String"
					},
					{
						"name": "deathState",
						"type": "String"
					},
					{
						"name": "deathCity",
						"type": "String"
					},
					{
						"name": "nameFirst",
						"type": "String"
					},
					{
						"name": "nameLast",
						"type": "String"
					},
					{
						"name": "nameGiven",
						"type": "String"
					},
					{
						"name": "weight",
						"type": "String"
					},
					{
						"name": "height",
						"type": "String"
					},
					{
						"name": "bats",
						"type": "String"
					},
					{
						"name": "throws",
						"type": "String"
					},
					{
						"name": "debut",
						"type": "String"
					},
					{
						"name": "finalGame",
						"type": "String"
					},
					{
						"name": "retroID",
						"type": "String"
					},
					{
						"name": "bbrefID",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "\n",
						"nullValue": "",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('PlayersBlob_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('PlayersBlob_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BaseballLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product_Blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ProductNumber",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "String"
					},
					{
						"name": "ProductCategoryID",
						"type": "String"
					},
					{
						"name": "ProductModelID",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('Product_Blob_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('Product_Blob_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Q_Z')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('Q_Z_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('Q_Z_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDBBaseball1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "batting1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDBBaseball2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "BA",
						"type": "Double"
					},
					{
						"name": "OBP",
						"type": "Double"
					},
					{
						"name": "SLG",
						"type": "Double"
					},
					{
						"name": "TB",
						"type": "Int32"
					},
					{
						"name": "birthYear",
						"type": "String"
					},
					{
						"name": "birthMonth",
						"type": "String"
					},
					{
						"name": "birthDay",
						"type": "String"
					},
					{
						"name": "birthCountry",
						"type": "String"
					},
					{
						"name": "birthState",
						"type": "String"
					},
					{
						"name": "birthCity",
						"type": "String"
					},
					{
						"name": "deathYear",
						"type": "String"
					},
					{
						"name": "deathMonth",
						"type": "String"
					},
					{
						"name": "deathDay",
						"type": "String"
					},
					{
						"name": "deathCountry",
						"type": "String"
					},
					{
						"name": "deathState",
						"type": "String"
					},
					{
						"name": "deathCity",
						"type": "String"
					},
					{
						"name": "nameFirst",
						"type": "String"
					},
					{
						"name": "nameLast",
						"type": "String"
					},
					{
						"name": "nameGiven",
						"type": "String"
					},
					{
						"name": "weight",
						"type": "String"
					},
					{
						"name": "height",
						"type": "String"
					},
					{
						"name": "bats",
						"type": "String"
					},
					{
						"name": "throws",
						"type": "String"
					},
					{
						"name": "debut",
						"type": "String"
					},
					{
						"name": "finalGame",
						"type": "String"
					},
					{
						"name": "retroID",
						"type": "String"
					},
					{
						"name": "bbrefID",
						"type": "String"
					},
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "yearID",
						"type": "String"
					},
					{
						"name": "stint",
						"type": "String"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int32"
					},
					{
						"name": "AB",
						"type": "Int32"
					},
					{
						"name": "R",
						"type": "Int32"
					},
					{
						"name": "H",
						"type": "Int32"
					},
					{
						"name": "H2B",
						"type": "Int32"
					},
					{
						"name": "H3B",
						"type": "Int32"
					},
					{
						"name": "HR",
						"type": "Int32"
					},
					{
						"name": "RBI",
						"type": "Int32"
					},
					{
						"name": "SB",
						"type": "Int32"
					},
					{
						"name": "CS",
						"type": "Int32"
					},
					{
						"name": "BB",
						"type": "Int32"
					},
					{
						"name": "SO",
						"type": "Int32"
					},
					{
						"name": "IBB",
						"type": "Int32"
					},
					{
						"name": "HBP",
						"type": "Int32"
					},
					{
						"name": "SH",
						"type": "Int32"
					},
					{
						"name": "SF",
						"type": "Int32"
					},
					{
						"name": "GIDP",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "batting1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB_ProdCat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "ProductCategoryID",
						"type": "Int32"
					},
					{
						"name": "ParentProductCategoryID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[ProductCategory]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB_Products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "ProductID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ProductNumber",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "ListPrice",
						"type": "Decimal"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "Decimal"
					},
					{
						"name": "ProductCategoryID",
						"type": "Int32"
					},
					{
						"name": "ProductModelID",
						"type": "Int32"
					},
					{
						"name": "SellStartDate",
						"type": "DateTime"
					},
					{
						"name": "SellEndDate",
						"type": "DateTime"
					},
					{
						"name": "DiscontinuedDate",
						"type": "DateTime"
					},
					{
						"name": "ThumbNailPhoto",
						"type": "Byte[]"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[Product]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB_SalesDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "SalesOrderID",
						"type": "Int32"
					},
					{
						"name": "SalesOrderDetailID",
						"type": "Int32"
					},
					{
						"name": "OrderQty",
						"type": "Int16"
					},
					{
						"name": "ProductID",
						"type": "Int32"
					},
					{
						"name": "UnitPrice",
						"type": "Decimal"
					},
					{
						"name": "UnitPriceDiscount",
						"type": "Decimal"
					},
					{
						"name": "LineTotal",
						"type": "Decimal"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[SalesOrderDetail]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB_SalesHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "SalesOrderID",
						"type": "Int32"
					},
					{
						"name": "RevisionNumber",
						"type": "Byte"
					},
					{
						"name": "OrderDate",
						"type": "DateTime"
					},
					{
						"name": "DueDate",
						"type": "DateTime"
					},
					{
						"name": "ShipDate",
						"type": "DateTime"
					},
					{
						"name": "Status",
						"type": "Byte"
					},
					{
						"name": "OnlineOrderFlag",
						"type": "Boolean"
					},
					{
						"name": "SalesOrderNumber",
						"type": "String"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "String"
					},
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "Int32"
					},
					{
						"name": "ShipToAddressID",
						"type": "Int32"
					},
					{
						"name": "BillToAddressID",
						"type": "Int32"
					},
					{
						"name": "ShipMethod",
						"type": "String"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "Decimal"
					},
					{
						"name": "TaxAmt",
						"type": "Decimal"
					},
					{
						"name": "Freight",
						"type": "Decimal"
					},
					{
						"name": "TotalDue",
						"type": "Decimal"
					},
					{
						"name": "Comment",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[SalesOrderHeader]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLProdFromSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "_Inserted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "_LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[ProductForSales]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "ProductID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ProductNumber",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "ListPrice",
						"type": "Decimal"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "Decimal"
					}
				],
				"typeProperties": {
					"tableName": "salesprod"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLProducts_new')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[Product]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_ProdCat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"structure": [
					{
						"name": "ProductCategoryID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[[Production].[ProductCategory]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"structure": [
					{
						"name": "ProductID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ProductNumber",
						"type": "String"
					},
					{
						"name": "MakeFlag",
						"type": "Boolean"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "Boolean"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "SafetyStockLevel",
						"type": "Int16"
					},
					{
						"name": "ReorderPoint",
						"type": "Int16"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "ListPrice",
						"type": "Decimal"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "Decimal"
					},
					{
						"name": "DaysToManufacture",
						"type": "Int32"
					},
					{
						"name": "ProductLine",
						"type": "String"
					},
					{
						"name": "Class",
						"type": "String"
					},
					{
						"name": "Style",
						"type": "String"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "Int32"
					},
					{
						"name": "ProductModelID",
						"type": "Int32"
					},
					{
						"name": "SellStartDate",
						"type": "DateTime"
					},
					{
						"name": "SellEndDate",
						"type": "DateTime"
					},
					{
						"name": "DiscontinuedDate",
						"type": "DateTime"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[[Production].[Product]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_SalesDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"structure": [
					{
						"name": "SalesOrderID",
						"type": "Int32"
					},
					{
						"name": "SalesOrderDetailID",
						"type": "Int32"
					},
					{
						"name": "CarrierTrackingNumber",
						"type": "String"
					},
					{
						"name": "OrderQty",
						"type": "Int16"
					},
					{
						"name": "ProductID",
						"type": "Int32"
					},
					{
						"name": "SpecialOfferID",
						"type": "Int32"
					},
					{
						"name": "UnitPrice",
						"type": "Decimal"
					},
					{
						"name": "UnitPriceDiscount",
						"type": "Decimal"
					},
					{
						"name": "LineTotal",
						"type": "Decimal"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[[Sales].[SalesOrderDetail]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_SalesHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"structure": [
					{
						"name": "SalesOrderID",
						"type": "Int32"
					},
					{
						"name": "RevisionNumber",
						"type": "Byte"
					},
					{
						"name": "OrderDate",
						"type": "DateTime"
					},
					{
						"name": "DueDate",
						"type": "DateTime"
					},
					{
						"name": "ShipDate",
						"type": "DateTime"
					},
					{
						"name": "Status",
						"type": "Byte"
					},
					{
						"name": "OnlineOrderFlag",
						"type": "Boolean"
					},
					{
						"name": "SalesOrderNumber",
						"type": "String"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "String"
					},
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "Int32"
					},
					{
						"name": "SalesPersonID",
						"type": "Int32"
					},
					{
						"name": "TerritoryID",
						"type": "Int32"
					},
					{
						"name": "BillToAddressID",
						"type": "Int32"
					},
					{
						"name": "ShipToAddressID",
						"type": "Int32"
					},
					{
						"name": "ShipMethodID",
						"type": "Int32"
					},
					{
						"name": "CreditCardID",
						"type": "Int32"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "String"
					},
					{
						"name": "CurrencyRateID",
						"type": "Int32"
					},
					{
						"name": "SubTotal",
						"type": "Decimal"
					},
					{
						"name": "TaxAmt",
						"type": "Decimal"
					},
					{
						"name": "Freight",
						"type": "Decimal"
					},
					{
						"name": "TotalDue",
						"type": "Decimal"
					},
					{
						"name": "Comment",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[[Sales].[SalesOrderHeader]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLprodstaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "_Inserted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "_LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DWhash",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[ProdFromSales2]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sales3.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Cost",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderDetailID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[SalesOrderDetail]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RevisionNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ShipDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OnlineOrderFlag",
						"type": "bit"
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipToAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "varchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Comment",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[SalesOrderHeader]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesUpdate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sales4.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Cost",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_cce')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "customerID",
						"type": "String"
					},
					{
						"name": "companyName",
						"type": "String"
					},
					{
						"name": "contactName",
						"type": "String"
					},
					{
						"name": "contactTitle",
						"type": "String"
					},
					{
						"name": "address.street",
						"type": "String"
					},
					{
						"name": "address.city",
						"type": "String"
					},
					{
						"name": "address.region",
						"type": "String"
					},
					{
						"name": "address.postalCode",
						"type": "String"
					},
					{
						"name": "address.country",
						"type": "String"
					},
					{
						"name": "address.phone",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "JsonFormat",
						"filePattern": "arrayOfObjects",
						"jsonPathDefinition": {
							"customerID": "$.['customerID']",
							"companyName": "$.['companyName']",
							"contactName": "$.['contactName']",
							"contactTitle": "$.['contactTitle']",
							"address.street": "$.['address']['street']",
							"address.city": "$.['address']['city']",
							"address.region": "$.['address']['region']",
							"address.postalCode": "$.['address']['postalCode']",
							"address.country": "$.['address']['country']",
							"address.phone": "$.['address']['phone']"
						}
					},
					"fileName": "[parameters('SourceDataset_cce_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('SourceDataset_cce_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_d2r')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "yearID",
						"type": "Int64"
					},
					{
						"name": "stint",
						"type": "Int64"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int64"
					},
					{
						"name": "AB",
						"type": "Int64"
					},
					{
						"name": "R",
						"type": "Int64"
					},
					{
						"name": "H",
						"type": "Int64"
					},
					{
						"name": "H2B",
						"type": "Int64"
					},
					{
						"name": "H3B",
						"type": "Int64"
					},
					{
						"name": "HR",
						"type": "Int64"
					},
					{
						"name": "RBI",
						"type": "Int64"
					},
					{
						"name": "SB",
						"type": "Int64"
					},
					{
						"name": "CS",
						"type": "Int64"
					},
					{
						"name": "BB",
						"type": "Int64"
					},
					{
						"name": "SO",
						"type": "Int64"
					},
					{
						"name": "IBB",
						"type": "String"
					},
					{
						"name": "HBP",
						"type": "String"
					},
					{
						"name": "SH",
						"type": "String"
					},
					{
						"name": "SF",
						"type": "String"
					},
					{
						"name": "GIDP",
						"type": "Int64"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('SourceDataset_d2r_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('SourceDataset_d2r_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_hii')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "yearID",
						"type": "Int64"
					},
					{
						"name": "stint",
						"type": "Int64"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int64"
					},
					{
						"name": "AB",
						"type": "Int64"
					},
					{
						"name": "R",
						"type": "Int64"
					},
					{
						"name": "H",
						"type": "Int64"
					},
					{
						"name": "H2B",
						"type": "Int64"
					},
					{
						"name": "H3B",
						"type": "Int64"
					},
					{
						"name": "HR",
						"type": "Int64"
					},
					{
						"name": "RBI",
						"type": "Int64"
					},
					{
						"name": "SB",
						"type": "Int64"
					},
					{
						"name": "CS",
						"type": "Int64"
					},
					{
						"name": "BB",
						"type": "Int64"
					},
					{
						"name": "SO",
						"type": "Int64"
					},
					{
						"name": "IBB",
						"type": "String"
					},
					{
						"name": "HBP",
						"type": "String"
					},
					{
						"name": "SH",
						"type": "String"
					},
					{
						"name": "SF",
						"type": "String"
					},
					{
						"name": "GIDP",
						"type": "Int64"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('SourceDataset_hii_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('SourceDataset_hii_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoDayStatsSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('TaxiDemoDayStatsSink_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('TaxiDemoDayStatsSink_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoDayStatsSink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoTotalByPaymentType')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('TaxiDemoTotalByPaymentType_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('TaxiDemoTotalByPaymentType_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoTotalByPaymentType1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoVendorStatsSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('TaxiDemoVendorStatsSink_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('TaxiDemoVendorStatsSink_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoVendorStatsSink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TimeWritingDay1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "TimeWritingFactDay1.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "employeeID",
						"type": "String"
					},
					{
						"name": "workLoadDt",
						"type": "String"
					},
					{
						"name": "WorkDt",
						"type": "String"
					},
					{
						"name": "vendorCode",
						"type": "String"
					},
					{
						"name": "CostCenter",
						"type": "String"
					},
					{
						"name": "serviceType",
						"type": "String"
					},
					{
						"name": "approveStatus",
						"type": "String"
					},
					{
						"name": "Hour",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TimeWritingDay2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sample"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "TimeWritingFactDay2.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "employeeID",
						"type": "String"
					},
					{
						"name": "workLoadDt",
						"type": "String"
					},
					{
						"name": "WorkDt",
						"type": "String"
					},
					{
						"name": "vendorCode",
						"type": "String"
					},
					{
						"name": "CostCenter",
						"type": "String"
					},
					{
						"name": "serviceType",
						"type": "String"
					},
					{
						"name": "approveStatus",
						"type": "String"
					},
					{
						"name": "Hour",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/USDOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('USDOutput_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('USDOutput_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/USDOutput1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output/taxipaymentout",
						"container": "mycontainer"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsoutput_folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsoutput_folder1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_params')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Params"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Prop_0",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('blob_params_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('blob_params_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dateRange')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbSourceParams')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbTargetParams')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"mytablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().mytablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/driftout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Drifts"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('driftout_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('driftout_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/driverscsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "drivers.csv",
						"folderPath": "SampleData/Drivers",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "driverId",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "ssn",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "certified",
						"type": "String"
					},
					{
						"name": "wage-plan",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummyContainer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dupefolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output/dupes",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fixedwidth')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "fixed.txt",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/folderout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output/mydataflow123partfiles",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsonblob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "_id",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "loc",
						"type": "String"
					},
					{
						"name": "pop",
						"type": "Int64"
					},
					{
						"name": "state",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "JsonFormat",
						"filePattern": "setOfObjects"
					},
					"fileName": "[parameters('jsonblob_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('jsonblob_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/junktable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "junk"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/locationMap')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('locationMap_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('locationMap_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/locationMap_dt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "locationMap.csv",
						"folderPath": "SampleData/Soccer",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/marktabledw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "val",
						"type": "uniqueidentifier"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "marktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_dataflow_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BaseballLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('movie_dataflow_sink_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('movie_dataflow_sink_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BaseballLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_dataflow_sink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_dataflow_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('movie_dataflow_source_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('movie_dataflow_source_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_dataflow_source1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_dataflow_source11')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviechanges')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movieupdates.csv",
						"folderPath": "movies",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('movies2_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('movies2_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesADLS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movieupdates.csv",
						"folderPath": "movies",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "108583",
						"type": "String"
					},
					{
						"name": "Fawlty Towers",
						"type": "String"
					},
					{
						"name": "Comedy",
						"type": "String"
					},
					{
						"name": "1980",
						"type": "String"
					},
					{
						"name": "1",
						"type": "String"
					},
					{
						"name": "54",
						"type": "String"
					},
					{
						"name": "U",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesDB2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB2.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movies",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "genresgenregenre",
						"type": "String"
					},
					{
						"name": "YEAR",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesDriftSource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "SampleData/movies",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesout.csv",
						"folderPath": "movies/output",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesoutnew_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesoutnew.csv",
						"folderPath": "movies/output",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesoutnew_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesoutnew.csv",
						"folderPath": "movies/output",
						"fileSystem": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesoutnew_parquet2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesoutnew.parquet",
						"folderPath": "movies/output",
						"fileSystem": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "MovieIdDupe",
						"type": "INT32"
					},
					{
						"name": "ActionDupe",
						"type": "UTF8"
					},
					{
						"name": "MovieId",
						"type": "INT32"
					},
					{
						"name": "Title",
						"type": "UTF8"
					},
					{
						"name": "Genre",
						"type": "UTF8"
					},
					{
						"name": "Year",
						"type": "INT32"
					},
					{
						"name": "Rating",
						"type": "INT32"
					},
					{
						"name": "RottenTom",
						"type": "INT32"
					},
					{
						"name": "Action",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesoutputfolder_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies/output",
						"fileSystem": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviestage2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "movie",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "genres",
						"type": "nvarchar"
					},
					{
						"name": "year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Rating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RottenTomato",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Rotton Tomato",
						"type": "nvarchar"
					},
					{
						"name": "dateOfETL",
						"type": "date"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[moviestage2]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movieupdates_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movieupdates.parquet",
						"folderPath": "movies",
						"fileSystem": "mycontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Prop_0",
						"type": "UTF8"
					},
					{
						"name": "Prop_1",
						"type": "UTF8"
					},
					{
						"name": "Prop_2",
						"type": "UTF8"
					},
					{
						"name": "Prop_3",
						"type": "UTF8"
					},
					{
						"name": "Prop_4",
						"type": "UTF8"
					},
					{
						"name": "Prop_5",
						"type": "UTF8"
					},
					{
						"name": "Prop_6",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/names')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "names2.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "acctnum",
						"type": "String"
					},
					{
						"name": "fullname",
						"type": "String"
					},
					{
						"name": "phone",
						"type": "String"
					},
					{
						"name": "zip",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/names100')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "90 Records.csv",
						"folderPath": "SampleData/HR",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Emp ID",
						"type": "String"
					},
					{
						"name": "Name Prefix",
						"type": "String"
					},
					{
						"name": "First Name",
						"type": "String"
					},
					{
						"name": "Middle Initial",
						"type": "String"
					},
					{
						"name": "Last Name",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "E Mail",
						"type": "String"
					},
					{
						"name": "Father's Name",
						"type": "String"
					},
					{
						"name": "Mother's Name",
						"type": "String"
					},
					{
						"name": "Mother's Maiden Name",
						"type": "String"
					},
					{
						"name": "Date of Birth",
						"type": "String"
					},
					{
						"name": "Time of Birth",
						"type": "String"
					},
					{
						"name": "Age in Yrs.",
						"type": "String"
					},
					{
						"name": "Weight in Kgs.",
						"type": "String"
					},
					{
						"name": "Date of Joining",
						"type": "String"
					},
					{
						"name": "Quarter of Joining",
						"type": "String"
					},
					{
						"name": "Half of Joining",
						"type": "String"
					},
					{
						"name": "Year of Joining",
						"type": "String"
					},
					{
						"name": "Month of Joining",
						"type": "String"
					},
					{
						"name": "Month Name of Joining",
						"type": "String"
					},
					{
						"name": "Short Month",
						"type": "String"
					},
					{
						"name": "Day of Joining",
						"type": "String"
					},
					{
						"name": "DOW of Joining",
						"type": "String"
					},
					{
						"name": "Short DOW",
						"type": "String"
					},
					{
						"name": "Age in Company (Years)",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Last % Hike",
						"type": "String"
					},
					{
						"name": "SSN",
						"type": "String"
					},
					{
						"name": "Phone No. ",
						"type": "String"
					},
					{
						"name": "Place Name",
						"type": "String"
					},
					{
						"name": "County",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "User Name",
						"type": "String"
					},
					{
						"name": "Password",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/newbattingtable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "batting1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/newbattingtable_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "playerID_yearID",
						"type": "nvarchar"
					},
					{
						"name": "BA",
						"type": "float",
						"precision": 15
					},
					{
						"name": "OBP",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SLG",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TB",
						"type": "int",
						"precision": 10
					},
					{
						"name": "birthYear",
						"type": "nvarchar"
					},
					{
						"name": "birthMonth",
						"type": "nvarchar"
					},
					{
						"name": "birthDay",
						"type": "nvarchar"
					},
					{
						"name": "birthCountry",
						"type": "nvarchar"
					},
					{
						"name": "birthState",
						"type": "nvarchar"
					},
					{
						"name": "birthCity",
						"type": "nvarchar"
					},
					{
						"name": "deathYear",
						"type": "nvarchar"
					},
					{
						"name": "deathMonth",
						"type": "nvarchar"
					},
					{
						"name": "deathDay",
						"type": "nvarchar"
					},
					{
						"name": "deathCountry",
						"type": "nvarchar"
					},
					{
						"name": "deathState",
						"type": "nvarchar"
					},
					{
						"name": "deathCity",
						"type": "nvarchar"
					},
					{
						"name": "nameFirst",
						"type": "nvarchar"
					},
					{
						"name": "nameLast",
						"type": "nvarchar"
					},
					{
						"name": "nameGiven",
						"type": "nvarchar"
					},
					{
						"name": "weight",
						"type": "nvarchar"
					},
					{
						"name": "height",
						"type": "nvarchar"
					},
					{
						"name": "bats",
						"type": "nvarchar"
					},
					{
						"name": "throws",
						"type": "nvarchar"
					},
					{
						"name": "debut",
						"type": "nvarchar"
					},
					{
						"name": "finalGame",
						"type": "nvarchar"
					},
					{
						"name": "retroID",
						"type": "nvarchar"
					},
					{
						"name": "bbrefID",
						"type": "nvarchar"
					},
					{
						"name": "playerID",
						"type": "nvarchar"
					},
					{
						"name": "yearID",
						"type": "nvarchar"
					},
					{
						"name": "stint",
						"type": "nvarchar"
					},
					{
						"name": "teamID",
						"type": "nvarchar"
					},
					{
						"name": "lgID",
						"type": "nvarchar"
					},
					{
						"name": "G",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AB",
						"type": "int",
						"precision": 10
					},
					{
						"name": "R",
						"type": "int",
						"precision": 10
					},
					{
						"name": "H",
						"type": "int",
						"precision": 10
					},
					{
						"name": "H2B",
						"type": "int",
						"precision": 10
					},
					{
						"name": "H3B",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RBI",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SB",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BB",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IBB",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HBP",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SH",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SF",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GIDP",
						"type": "int",
						"precision": 10
					},
					{
						"name": "currenttime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "dbo.batting1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/others')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('others_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('others_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/paramsfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "params.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/partout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output/parts",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prodfromsales3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "_Inserted",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "_LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DWhash",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[ProdFromSales2]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Product2.csv",
						"folderPath": "SampleData/AW",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "_c0",
						"type": "String"
					},
					{
						"name": "_c1",
						"type": "String"
					},
					{
						"name": "_c2",
						"type": "String"
					},
					{
						"name": "_c3",
						"type": "String"
					},
					{
						"name": "_c4",
						"type": "String"
					},
					{
						"name": "_c5",
						"type": "String"
					},
					{
						"name": "_c6",
						"type": "String"
					},
					{
						"name": "_c7",
						"type": "String"
					},
					{
						"name": "_c8",
						"type": "String"
					},
					{
						"name": "_c9",
						"type": "String"
					},
					{
						"name": "_c10",
						"type": "String"
					},
					{
						"name": "_c11",
						"type": "String"
					},
					{
						"name": "_c12",
						"type": "String"
					},
					{
						"name": "_c13",
						"type": "String"
					},
					{
						"name": "_c14",
						"type": "String"
					},
					{
						"name": "_c15",
						"type": "String"
					},
					{
						"name": "_c16",
						"type": "String"
					},
					{
						"name": "_c17",
						"type": "String"
					},
					{
						"name": "_c18",
						"type": "String"
					},
					{
						"name": "_c19",
						"type": "String"
					},
					{
						"name": "_c20",
						"type": "String"
					},
					{
						"name": "_c21",
						"type": "String"
					},
					{
						"name": "_c22",
						"type": "String"
					},
					{
						"name": "_c23",
						"type": "String"
					},
					{
						"name": "_c24",
						"type": "String"
					},
					{
						"name": "_c25",
						"type": "String"
					},
					{
						"name": "_c26",
						"type": "String"
					},
					{
						"name": "_c27",
						"type": "String"
					},
					{
						"name": "_c28",
						"type": "String"
					},
					{
						"name": "_c29",
						"type": "String"
					},
					{
						"name": "_c30",
						"type": "String"
					},
					{
						"name": "_c31",
						"type": "String"
					},
					{
						"name": "_c32",
						"type": "String"
					},
					{
						"name": "_c33",
						"type": "String"
					},
					{
						"name": "_c34",
						"type": "String"
					},
					{
						"name": "_c35",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/readskipped')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "salesskip.csv",
						"folderPath": "SampleData",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sales2.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Cost",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sales2.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Cost",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesdrift')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Drifts"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('salesdrift_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('salesdrift_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesskip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "salesskip.csv",
						"folderPath": "SampleData",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scottexample')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Copy of ScottExample.csv",
						"folderPath": "SampleData",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Weeks",
						"type": "String"
					},
					{
						"name": "Column X",
						"type": "String"
					},
					{
						"name": "Column Y",
						"type": "String"
					},
					{
						"name": "Column Z",
						"type": "String"
					},
					{
						"name": "Column AA",
						"type": "String"
					},
					{
						"name": "Column AB",
						"type": "String"
					},
					{
						"name": "Column AC",
						"type": "String"
					},
					{
						"name": "Column AD",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/searchLog')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "SearchLog.tsv",
						"folderPath": "SampleData/USQL",
						"container": "mycontainer"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "_c0",
						"type": "String"
					},
					{
						"name": "_c1",
						"type": "String"
					},
					{
						"name": "_c2",
						"type": "String"
					},
					{
						"name": "_c3",
						"type": "String"
					},
					{
						"name": "_c4",
						"type": "String"
					},
					{
						"name": "_c5",
						"type": "String"
					},
					{
						"name": "_c6",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/soccerDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "dbo.soccerDB"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/soccerOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output/soccer",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/soccer_events')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Soccer"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "id_odsp",
						"type": "String"
					},
					{
						"name": "id_event",
						"type": "String"
					},
					{
						"name": "sort_order",
						"type": "Int32"
					},
					{
						"name": "time",
						"type": "String"
					},
					{
						"name": "text",
						"type": "String"
					},
					{
						"name": "event_type",
						"type": "String"
					},
					{
						"name": "event_type2",
						"type": "String"
					},
					{
						"name": "side",
						"type": "String"
					},
					{
						"name": "event_team",
						"type": "String"
					},
					{
						"name": "opponent",
						"type": "String"
					},
					{
						"name": "player",
						"type": "String"
					},
					{
						"name": "player2",
						"type": "String"
					},
					{
						"name": "player_in",
						"type": "String"
					},
					{
						"name": "player_out",
						"type": "String"
					},
					{
						"name": "shot_place",
						"type": "String"
					},
					{
						"name": "shot_outcome",
						"type": "String"
					},
					{
						"name": "is_goal",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "bodypart",
						"type": "String"
					},
					{
						"name": "assist_method",
						"type": "String"
					},
					{
						"name": "situation",
						"type": "String"
					},
					{
						"name": "fast_break",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('soccer_events_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('soccer_events_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/soccer_events_dt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "events.csv",
						"folderPath": "SampleData/Soccer",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id_odsp",
						"type": "String"
					},
					{
						"name": "id_event",
						"type": "String"
					},
					{
						"name": "sort_order",
						"type": "String"
					},
					{
						"name": "time",
						"type": "String"
					},
					{
						"name": "text",
						"type": "String"
					},
					{
						"name": "event_type",
						"type": "String"
					},
					{
						"name": "event_type2",
						"type": "String"
					},
					{
						"name": "side",
						"type": "String"
					},
					{
						"name": "event_team",
						"type": "String"
					},
					{
						"name": "opponent",
						"type": "String"
					},
					{
						"name": "player",
						"type": "String"
					},
					{
						"name": "player2",
						"type": "String"
					},
					{
						"name": "player_in",
						"type": "String"
					},
					{
						"name": "player_out",
						"type": "String"
					},
					{
						"name": "shot_place",
						"type": "String"
					},
					{
						"name": "shot_outcome",
						"type": "String"
					},
					{
						"name": "is_goal",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "bodypart",
						"type": "String"
					},
					{
						"name": "assist_method",
						"type": "String"
					},
					{
						"name": "situation",
						"type": "String"
					},
					{
						"name": "fast_break",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourceBatting')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Batting.csv",
						"folderPath": "SampleData/baseball",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "yearID",
						"type": "String"
					},
					{
						"name": "stint",
						"type": "String"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "String"
					},
					{
						"name": "AB",
						"type": "String"
					},
					{
						"name": "R",
						"type": "String"
					},
					{
						"name": "H",
						"type": "String"
					},
					{
						"name": "H2B",
						"type": "String"
					},
					{
						"name": "H3B",
						"type": "String"
					},
					{
						"name": "HR",
						"type": "String"
					},
					{
						"name": "RBI",
						"type": "String"
					},
					{
						"name": "SB",
						"type": "String"
					},
					{
						"name": "CS",
						"type": "String"
					},
					{
						"name": "BB",
						"type": "String"
					},
					{
						"name": "SO",
						"type": "String"
					},
					{
						"name": "IBB",
						"type": "String"
					},
					{
						"name": "HBP",
						"type": "String"
					},
					{
						"name": "SH",
						"type": "String"
					},
					{
						"name": "SF",
						"type": "String"
					},
					{
						"name": "GIDP",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourcePlayer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "People.csv",
						"folderPath": "SampleData/baseball",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "birthYear",
						"type": "String"
					},
					{
						"name": "birthMonth",
						"type": "String"
					},
					{
						"name": "birthDay",
						"type": "String"
					},
					{
						"name": "birthCountry",
						"type": "String"
					},
					{
						"name": "birthState",
						"type": "String"
					},
					{
						"name": "birthCity",
						"type": "String"
					},
					{
						"name": "deathYear",
						"type": "String"
					},
					{
						"name": "deathMonth",
						"type": "String"
					},
					{
						"name": "deathDay",
						"type": "String"
					},
					{
						"name": "deathCountry",
						"type": "String"
					},
					{
						"name": "deathState",
						"type": "String"
					},
					{
						"name": "deathCity",
						"type": "String"
					},
					{
						"name": "nameFirst",
						"type": "String"
					},
					{
						"name": "nameLast",
						"type": "String"
					},
					{
						"name": "nameGiven",
						"type": "String"
					},
					{
						"name": "weight",
						"type": "String"
					},
					{
						"name": "height",
						"type": "String"
					},
					{
						"name": "bats",
						"type": "String"
					},
					{
						"name": "throws",
						"type": "String"
					},
					{
						"name": "debut",
						"type": "String"
					},
					{
						"name": "finalGame",
						"type": "String"
					},
					{
						"name": "retroID",
						"type": "String"
					},
					{
						"name": "bbrefID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqltablev2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "StateProvince",
						"type": "nvarchar"
					},
					{
						"name": "CountryRegion",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[SalesLT].[Address]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxi_trip_data_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "rate_code",
						"type": "String"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "dropoff_datetime",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					},
					{
						"name": "trip_time_in_secs",
						"type": "String"
					},
					{
						"name": "trip_distance",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('taxi_trip_data_input_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('taxi_trip_data_input_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxi_trip_data_input1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "trip_data_1.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "rate_code",
						"type": "String"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "dropoff_datetime",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					},
					{
						"name": "trip_time_in_secs",
						"type": "String"
					},
					{
						"name": "trip_distance",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxi_trip_fare_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": " hack_license",
						"type": "String"
					},
					{
						"name": " vendor_id",
						"type": "String"
					},
					{
						"name": " pickup_datetime",
						"type": "String"
					},
					{
						"name": " payment_type",
						"type": "String"
					},
					{
						"name": " fare_amount",
						"type": "String"
					},
					{
						"name": " surcharge",
						"type": "String"
					},
					{
						"name": " mta_tax",
						"type": "String"
					},
					{
						"name": " tip_amount",
						"type": "String"
					},
					{
						"name": " tolls_amount",
						"type": "String"
					},
					{
						"name": " total_amount",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('taxi_trip_fare_input_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('taxi_trip_fare_input_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxi_trip_fare_input1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "trip_fare_1.csv",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/timesheetCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "timesheet.csv",
						"folderPath": "SampleData/Drivers",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "driverId",
						"type": "String"
					},
					{
						"name": "week",
						"type": "String"
					},
					{
						"name": "hours-logged",
						"type": "String"
					},
					{
						"name": "miles-logged",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"tenant": "[parameters('AzureDataLakeStorage2_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('AzureDataLakeStorage2_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_servicePrincipalKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage3_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage3_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStore1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('AzureDataLakeStore1_properties_typeProperties_dataLakeStoreUri')]",
					"tenant": "[parameters('AzureDataLakeStore1_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('AzureDataLakeStore1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureDataLakeStore1_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunction1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "https://markkfuncapp.azurewebsites.net",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunction1_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDW1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDW1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDW2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDW2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BaseballLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('BaseballLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDb1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDb2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWDimProd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('DWDimProd_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesADLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('MoviesADLS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('MoviesADLS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MyAzureBlobLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureStorage",
				"typeProperties": {
					"connectionString": "[parameters('MyAzureBlobLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/databrickswest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://westus.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('databrickswest_accessToken')]"
					},
					"existingClusterId": "0418-192236-dying740"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mynewls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('mynewls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mynewls1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('mynewls1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldbakv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('sqldbakv_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "DailyDWPattern",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-04-30T20:56:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DailyDWPattern')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_alwaysonIR'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Central US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_integrationRuntime1'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_integrationRuntime2'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West US 2",
						"nodeSize": "Standard_D4_v2",
						"numberOfNodes": 2,
						"maxParallelExecutionsPerNode": 1,
						"vNetProperties": {
							"vNetId": "/subscriptions/1e42591f-1f0c-4c5a-b7f2-a268f6105ec5/resourceGroups/SKResourceGroup/providers/Microsoft.Network/virtualNetworks/MyLinuxVMVNET",
							"subnet": "MyLinuxVMSubnet"
						}
					},
					"ssisProperties": {
						"catalogInfo": {
							"catalogServerEndpoint": "[parameters('integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint')]",
							"catalogAdminUserName": "[parameters('integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName')]",
							"catalogAdminPassword": {
								"type": "SecureString",
								"value": "[parameters('integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword')]"
							},
							"catalogPricingTier": "S0"
						},
						"edition": "Standard",
						"licenseType": "BasePrice"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_integrationRuntime3'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_myDataFlowCluster'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 80,
							"timeToLive": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_mylargecluster'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 68,
							"timeToLiveInMinutes": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_selfhostedir'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AppendFiles')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sales1",
								"type": "DatasetReference"
							},
							"name": "SalesOrig",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "Sales3",
								"type": "DatasetReference"
							},
							"name": "SalesNew",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "SalesUpdate",
								"type": "DatasetReference"
							},
							"name": "SalesUpdate",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "UpdatedOutput"
						}
					],
					"transformations": [
						{
							"name": "UnionNew"
						},
						{
							"name": "UnionUpdate"
						},
						{
							"name": "Distinct"
						},
						{
							"name": "NotNull"
						},
						{
							"name": "SurrogateKey"
						},
						{
							"name": "ReJoinData"
						},
						{
							"name": "OrigData"
						}
					],
					"script": "\n\nsource(output(\n\t\tID as string,\n\t\tTitle as string,\n\t\tCost as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> SalesOrig\nsource(output(\n\t\tID as string,\n\t\tTitle as string,\n\t\tCost as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> SalesNew\nsource(output(\n\t\tID as string,\n\t\tTitle as string,\n\t\tCost as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> SalesUpdate\nSalesOrig, SalesNew union(byName: true)~> UnionNew\nUnionNew, SalesUpdate union(byName: true)~> UnionUpdate\nSurrogateKey aggregate(groupBy(ID),\n\twinner = last(mykey)) ~> Distinct\nUnionUpdate filter(!isNull(Title)) ~> NotNull\nNotNull keyGenerate(output(mykey as long),\n\tstartAt: 1L) ~> SurrogateKey\nDistinct, OrigData join(winner == mykey,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ReJoinData\nSurrogateKey select(mapColumn(\n\t\tID,\n\t\tTitle,\n\t\tCost,\n\t\tmykey\n\t)) ~> OrigData\nReJoinData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SalesUpdated.csv'],\n\ttruncate: true,\n\tmapColumn(\n\t\tID = OrigData@ID,\n\t\tTitle,\n\t\tCost\n\t),\n\tpartitionBy('hash', 1)) ~> UpdatedOutput"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sales1')]",
				"[concat(variables('factoryId'), '/datasets/Sales3')]",
				"[concat(variables('factoryId'), '/datasets/SalesUpdate')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AppendToFile')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CurrencyDatasetUSD1",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DelimitedText6",
								"type": "DatasetReference"
							},
							"name": "source2",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "USDOutput1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Union1"
						}
					],
					"script": "\n\nsource(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'nnn') ~> source1\nsource(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'nnn') ~> source2\nsource1, source2 union(byName: true)~> Union1\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['combo.tsv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CurrencyDatasetUSD1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText6')]",
				"[concat(variables('factoryId'), '/datasets/USDOutput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Baseball 1 Basic Stats')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Baseball"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sourceBatting",
								"type": "DatasetReference"
							},
							"name": "sourceBatting",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "sourcePlayer",
								"type": "DatasetReference"
							},
							"name": "sourcePlayer",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "newbattingtable_sql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "origSourceBatting"
						},
						{
							"name": "createAggs"
						},
						{
							"name": "PlayerInfoPlusOrigStats"
						},
						{
							"name": "Join1"
						},
						{
							"name": "addTimestamp"
						}
					],
					"script": "\n\nsource(output(\n\t\tplayerID as string,\n\t\tyearID as string,\n\t\tstint as string,\n\t\tteamID as string,\n\t\tlgID as string,\n\t\tG as integer,\n\t\tAB as integer,\n\t\tR as integer,\n\t\tH as integer,\n\t\tH2B as integer,\n\t\tH3B as integer,\n\t\tHR as integer,\n\t\tRBI as integer,\n\t\tSB as integer,\n\t\tCS as integer,\n\t\tBB as integer,\n\t\tSO as integer,\n\t\tIBB as integer,\n\t\tHBP as integer,\n\t\tSH as integer,\n\t\tSF as integer,\n\t\tGIDP as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> sourceBatting\nsource(output(\n\t\tplayerID as string,\n\t\tbirthYear as string,\n\t\tbirthMonth as string,\n\t\tbirthDay as string,\n\t\tbirthCountry as string,\n\t\tbirthState as string,\n\t\tbirthCity as string,\n\t\tdeathYear as string,\n\t\tdeathMonth as string,\n\t\tdeathDay as string,\n\t\tdeathCountry as string,\n\t\tdeathState as string,\n\t\tdeathCity as string,\n\t\tnameFirst as string,\n\t\tnameLast as string,\n\t\tnameGiven as string,\n\t\tweight as string,\n\t\theight as string,\n\t\tbats as string,\n\t\tthrows as string,\n\t\tdebut as string,\n\t\tfinalGame as string,\n\t\tretroID as string,\n\t\tbbrefID as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> sourcePlayer\nsourceBatting select(mapColumn(\n\t\tplayerID,\n\t\tyearID,\n\t\tstint,\n\t\tteamID,\n\t\tlgID,\n\t\tG,\n\t\tAB,\n\t\tR,\n\t\tH,\n\t\tH2B,\n\t\tH3B,\n\t\tHR,\n\t\tRBI,\n\t\tSB,\n\t\tCS,\n\t\tBB,\n\t\tSO,\n\t\tIBB,\n\t\tHBP,\n\t\tSH,\n\t\tSF,\n\t\tGIDP\n\t)) ~> origSourceBatting\nsourceBatting aggregate(groupBy(playerID_yearID = playerID+'_'+yearID),\n\tBA = round(avg(H/AB),3),\n\t\tOBP = round(avg((H+BB+HBP)/(AB+BB+HBP+SF)),3),\n\t\tSLG = round(avg(((HR * 4) + (H3B * 3) + (H2B * 2) + (H-H2B-H3B-HR))/AB),3),\n\t\tTB = max((HR * 4) + (H3B * 3) + (H2B * 2) + (H-H2B-H3B-HR))) ~> createAggs\nsourcePlayer, origSourceBatting join(sourcePlayer@playerID == origSourceBatting@playerID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> PlayerInfoPlusOrigStats\ncreateAggs, origSourceBatting join(playerID_yearID == playerID + '_'+yearID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1\nJoin1 derive(currenttime = currentTimestamp()) ~> addTimestamp\naddTimestamp sink(input(\n\t\tplayerID_yearID as string,\n\t\tBA as double,\n\t\tOBP as double,\n\t\tSLG as double,\n\t\tTB as integer,\n\t\tbirthYear as string,\n\t\tbirthMonth as string,\n\t\tbirthDay as string,\n\t\tbirthCountry as string,\n\t\tbirthState as string,\n\t\tbirthCity as string,\n\t\tdeathYear as string,\n\t\tdeathMonth as string,\n\t\tdeathDay as string,\n\t\tdeathCountry as string,\n\t\tdeathState as string,\n\t\tdeathCity as string,\n\t\tnameFirst as string,\n\t\tnameLast as string,\n\t\tnameGiven as string,\n\t\tweight as string,\n\t\theight as string,\n\t\tbats as string,\n\t\tthrows as string,\n\t\tdebut as string,\n\t\tfinalGame as string,\n\t\tretroID as string,\n\t\tbbrefID as string,\n\t\tplayerID as string,\n\t\tyearID as string,\n\t\tstint as string,\n\t\tteamID as string,\n\t\tlgID as string,\n\t\tG as integer,\n\t\tAB as integer,\n\t\tR as integer,\n\t\tH as integer,\n\t\tH2B as integer,\n\t\tH3B as integer,\n\t\tHR as integer,\n\t\tRBI as integer,\n\t\tSB as integer,\n\t\tCS as integer,\n\t\tBB as integer,\n\t\tSO as integer,\n\t\tIBB as integer,\n\t\tHBP as integer,\n\t\tSH as integer,\n\t\tSF as integer,\n\t\tGIDP as integer,\n\t\tcurrenttime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourceBatting')]",
				"[concat(variables('factoryId'), '/datasets/sourcePlayer')]",
				"[concat(variables('factoryId'), '/datasets/newbattingtable_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF-FactLoader')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a data flow example of how to load facts into your fact table from a single sample Employee dimension. There is also an example of handling early-arriving facts.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Facts",
								"type": "DatasetReference"
							},
							"name": "Facts",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DimEmp",
								"type": "DatasetReference"
							},
							"name": "DimEmployee",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactTable2",
								"type": "DatasetReference"
							},
							"name": "writeFactTable"
						}
					],
					"transformations": [
						{
							"name": "SetAttributes"
						},
						{
							"name": "LookupDimEmployee"
						},
						{
							"name": "DailyAggs"
						},
						{
							"name": "OrigData"
						},
						{
							"name": "JoinAllColumns"
						},
						{
							"name": "CheckForEarlyFact"
						}
					],
					"script": "\n\nsource(output(\n\t\temployeeID as string,\n\t\tHours as string,\n\t\tAmount as string,\n\t\tProjDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:['SampleData/Facts/today/*.csv']) ~> Facts\nsource(output(\n\t\tEmpID as integer,\n\t\tsurrogatekey as string,\n\t\tRegion as string,\n\t\tStatus as string,\n\t\tEmpFunction as string,\n\t\tLevel as string,\n\t\tRole as string,\n\t\tStartDate as date,\n\t\tEndDate as date,\n\t\tiscurrent as integer,\n\t\tprocesstime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimEmployee\nFacts derive(employeeID = toInteger(employeeID),\n\t\tiscurrent = 1,\n\t\tfacttimestamp = currentTimestamp()) ~> SetAttributes\nSetAttributes, DimEmployee lookup(employeeID == EmpID\n\t&& SetAttributes@iscurrent == DimEmployee@iscurrent,\n\tbroadcast: 'none')~> LookupDimEmployee\nCheckForEarlyFact aggregate(groupBy(ProjDate,\n\t\temployeeID),\n\tTotalHours = sum(toInteger(Hours)),\n\t\tTotalAmount = sum(toInteger(Amount))) ~> DailyAggs\nLookupDimEmployee select(mapColumn(\n\t\temployeeID,\n\t\tHours,\n\t\tAmount,\n\t\tProjDate,\n\t\tfacttimestamp,\n\t\tEmpID,\n\t\tsurrogatekey,\n\t\tRegion,\n\t\tStatus,\n\t\tEmpFunction,\n\t\tLevel,\n\t\tRole,\n\t\tStartDate,\n\t\tEndDate,\n\t\tiscurrent = DimEmployee@iscurrent,\n\t\tprocesstime\n\t)) ~> OrigData\nDailyAggs, OrigData join(DailyAggs@ProjDate == OrigData@ProjDate\n\t&& DailyAggs@employeeID == OrigData@employeeID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> JoinAllColumns\nLookupDimEmployee derive(employeeID = iif(isNull(employeeID),0,employeeID)) ~> CheckForEarlyFact\nJoinAllColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 50,\n\tmapColumn(\n\t\tProjDate = OrigData@ProjDate,\n\t\temployeeID = OrigData@employeeID,\n\t\tTotalHours,\n\t\tTotalAmount,\n\t\tfacttimestamp,\n\t\tsurrogatekey,\n\t\tRegion,\n\t\tStatus,\n\t\tEmpFunction,\n\t\tLevel,\n\t\tRole,\n\t\tprocesstime\n\t),\n\tpartitionBy('roundRobin', 4)) ~> writeFactTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Facts')]",
				"[concat(variables('factoryId'), '/datasets/DimEmp')]",
				"[concat(variables('factoryId'), '/datasets/FactTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF-FactLoader1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a data flow example of how to load facts into your fact table from a single sample Employee dimension. There is also an example of handling early-arriving facts.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Facts1",
								"type": "DatasetReference"
							},
							"name": "Facts",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DimEmp2",
								"type": "DatasetReference"
							},
							"name": "DimEmployee",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactTable21",
								"type": "DatasetReference"
							},
							"name": "writeFactTable"
						}
					],
					"transformations": [
						{
							"name": "SetAttributes"
						},
						{
							"name": "LookupDimEmployee"
						},
						{
							"name": "DailyAggs"
						},
						{
							"name": "OrigData"
						},
						{
							"name": "JoinAllColumns"
						},
						{
							"name": "CheckForEarlyFact"
						}
					],
					"script": "\n\nsource(output(\n\t\temployeeID as string,\n\t\tHours as string,\n\t\tAmount as string,\n\t\tProjDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:['SampleData/Facts/today/*.csv']) ~> Facts\nsource(output(\n\t\tEmpID as integer,\n\t\tsurrogatekey as string,\n\t\tRegion as string,\n\t\tStatus as string,\n\t\tEmpFunction as string,\n\t\tLevel as string,\n\t\tRole as string,\n\t\tStartDate as date,\n\t\tEndDate as date,\n\t\tiscurrent as integer,\n\t\tprocesstime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimEmployee\nFacts derive(employeeID = toInteger(employeeID),\n\t\tiscurrent = 1,\n\t\tfacttimestamp = currentTimestamp()) ~> SetAttributes\nSetAttributes, DimEmployee lookup(employeeID == EmpID\n\t&& SetAttributes@iscurrent == DimEmployee@iscurrent,\n\tbroadcast: 'none')~> LookupDimEmployee\nCheckForEarlyFact aggregate(groupBy(ProjDate,\n\t\temployeeID),\n\tTotalHours = sum(toInteger(Hours)),\n\t\tTotalAmount = sum(toInteger(Amount))) ~> DailyAggs\nLookupDimEmployee select(mapColumn(\n\t\temployeeID,\n\t\tHours,\n\t\tAmount,\n\t\tProjDate,\n\t\tfacttimestamp,\n\t\tEmpID,\n\t\tsurrogatekey,\n\t\tRegion,\n\t\tStatus,\n\t\tEmpFunction,\n\t\tLevel,\n\t\tRole,\n\t\tStartDate,\n\t\tEndDate,\n\t\tiscurrent = DimEmployee@iscurrent,\n\t\tprocesstime\n\t)) ~> OrigData\nDailyAggs, OrigData join(DailyAggs@ProjDate == OrigData@ProjDate\n\t&& DailyAggs@employeeID == OrigData@employeeID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> JoinAllColumns\nLookupDimEmployee derive(employeeID = iif(isNull(employeeID),0,employeeID)) ~> CheckForEarlyFact\nJoinAllColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 50,\n\tmapColumn(\n\t\tProjDate = OrigData@ProjDate,\n\t\temployeeID = OrigData@employeeID,\n\t\tTotalHours,\n\t\tTotalAmount,\n\t\tfacttimestamp,\n\t\tsurrogatekey,\n\t\tRegion,\n\t\tStatus,\n\t\tEmpFunction,\n\t\tLevel,\n\t\tRole,\n\t\tprocesstime\n\t),\n\tpartitionBy('roundRobin', 4)) ~> writeFactTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Facts1')]",
				"[concat(variables('factoryId'), '/datasets/DimEmp2')]",
				"[concat(variables('factoryId'), '/datasets/FactTable21')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMasking')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Loans",
								"type": "DatasetReference"
							},
							"name": "Loans",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Mask"
						}
					],
					"script": "\n\nsource(output(\n\t\tid as string,\n\t\tmember_id as string,\n\t\tloan_amnt as string,\n\t\tfunded_amnt as string,\n\t\tfunded_amnt_inv as string,\n\t\tterm as string,\n\t\tint_rate as string,\n\t\tinstallment as string,\n\t\tgrade as string,\n\t\tsub_grade as string,\n\t\temp_title as string,\n\t\temp_length as string,\n\t\thome_ownership as string,\n\t\tannual_inc as string,\n\t\tverification_status as string,\n\t\tissue_d as string,\n\t\tloan_status as string,\n\t\tpymnt_plan as string,\n\t\turl as string,\n\t\tdesc as string,\n\t\tpurpose as string,\n\t\ttitle as string,\n\t\tzip_code as string,\n\t\taddr_state as string,\n\t\tdti as string,\n\t\tdelinq_2yrs as string,\n\t\tearliest_cr_line as string,\n\t\tinq_last_6mths as string,\n\t\tmths_since_last_delinq as string,\n\t\tmths_since_last_record as string,\n\t\topen_acc as string,\n\t\tpub_rec as string,\n\t\trevol_bal as string,\n\t\trevol_util as string,\n\t\ttotal_acc as string,\n\t\tinitial_list_status as string,\n\t\tout_prncp as string,\n\t\tout_prncp_inv as string,\n\t\ttotal_pymnt as string,\n\t\ttotal_pymnt_inv as string,\n\t\ttotal_rec_prncp as string,\n\t\ttotal_rec_int as string,\n\t\ttotal_rec_late_fee as string,\n\t\trecoveries as string,\n\t\tcollection_recovery_fee as string,\n\t\tlast_pymnt_d as string,\n\t\tlast_pymnt_amnt as string,\n\t\tnext_pymnt_d as string,\n\t\tlast_credit_pull_d as string,\n\t\tcollections_12_mths_ex_med as string,\n\t\tmths_since_last_major_derog as string,\n\t\tpolicy_code as string,\n\t\tapplication_type as string,\n\t\tannual_inc_joint as string,\n\t\tdti_joint as string,\n\t\tverification_status_joint as string,\n\t\tacc_now_delinq as string,\n\t\ttot_coll_amt as string,\n\t\ttot_cur_bal as string,\n\t\topen_acc_6m as string,\n\t\topen_il_6m as string,\n\t\topen_il_12m as string,\n\t\topen_il_24m as string,\n\t\tmths_since_rcnt_il as string,\n\t\ttotal_bal_il as string,\n\t\til_util as string,\n\t\topen_rv_12m as string,\n\t\topen_rv_24m as string,\n\t\tmax_bal_bc as string,\n\t\tall_util as string,\n\t\ttotal_rev_hi_lim as string,\n\t\tinq_fi as string,\n\t\ttotal_cu_tl as string,\n\t\tinq_last_12m as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Loans\nLoans derive(member_id = md5(member_id),\n\t\tloan_amnt = md5(loan_amnt)) ~> Mask\nMask sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Loans')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dedupe')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "moviestage2",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "moviestage2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\tRottenTomato as integer,\n\t\t{Rotton Tomato} as string,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nAggregate1 alterRow(deleteIf(occurences>1)) ~> AlterRow1\nsource1 aggregate(groupBy(ltitle = lower(title)),\n\tmovie = last(movie),\n\t\toccurences = sum(1)) ~> Aggregate1\nAlterRow1 sink(input(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\tRottenTomato as integer,\n\t\t{Rotton Tomato} as string,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tkeys:['movie'],\n\tmapColumn(\n\t\tmovie\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/moviestage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DistinctRows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesD2",
								"type": "DatasetReference"
							},
							"name": "MoviesCSV",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "OutputDistinctData"
						}
					],
					"transformations": [
						{
							"name": "DistinctRows"
						},
						{
							"name": "RowCountDistinct"
						},
						{
							"name": "OriginalData"
						},
						{
							"name": "RowCountOrig"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> MoviesCSV\nMoviesCSV aggregate(groupBy(movie),\n\teach(match(name!='movie'), $$ = first($$))) ~> DistinctRows\nDistinctRows aggregate(rowcount_agg = count(1)) ~> RowCountDistinct\nMoviesCSV select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\tRating,\n\t\t{Rotton Tomato}\n\t)) ~> OriginalData\nOriginalData aggregate(rowcount_orig = count(1)) ~> RowCountOrig\nDistinctRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> OutputDistinctData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesD2')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DriversETL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "driverscsv",
								"type": "DatasetReference"
							},
							"name": "driversCSV",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "timesheetCSV",
								"type": "DatasetReference"
							},
							"name": "timesheetCSV",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SumHoursAndMiles"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "\n\nsource(output(\n\t\tdriverId as integer,\n\t\tname as string,\n\t\tssn as string,\n\t\tlocation as string,\n\t\tcertified as boolean,\n\t\t{wage-plan} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> driversCSV\nsource(output(\n\t\tdriverId as integer,\n\t\tweek as integer,\n\t\t{hours-logged} as integer,\n\t\t{miles-logged} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> timesheetCSV\ntimesheetCSV aggregate(groupBy(driverId),\n\tsum_hourslogged = sum({hours-logged}),\n\t\tsum_mileslogged = sum({miles-logged})) ~> SumHoursAndMiles\ndriversCSV, SumHoursAndMiles join(driversCSV@driverId == SumHoursAndMiles@driverId,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1\nJoin1 select(mapColumn(\n\t\tdriverId = driversCSV@driverId,\n\t\tname,\n\t\tssn,\n\t\tlocation,\n\t\tcertified,\n\t\t{wage-plan},\n\t\tdriverId = SumHoursAndMiles@driverId,\n\t\tsum_hourslogged,\n\t\tsum_mileslogged\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/driverscsv')]",
				"[concat(variables('factoryId'), '/datasets/timesheetCSV')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicFileName')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_source1",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 filter(year == '1940' && Rating == '6') ~> Filter1\nFilter1 derive(filename = 'movies-out-' + toString(currentDate()) + '.csv') ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'filename',\n\ttruncate: true,\n\tmapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\tRating\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source1')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesSQLDB",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "moviestage2",
								"type": "DatasetReference"
							},
							"name": "source2",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "moviestage2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Exists1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\tRottenTomato as integer,\n\t\t{Rotton Tomato} as string,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source2\nsource1, source2 exists(toString(source1@movie) == source2@movie\n\t&& source1@title == source2@title\n\t&& source1@Rating == source2@Rating,\n\tnegate:true,\n\tbroadcast: 'none')~> Exists1\nExists1 sink(input(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\tRottenTomato as integer,\n\t\t{Rotton Tomato} as string,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesSQLDB')]",
				"[concat(variables('factoryId'), '/datasets/moviestage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactLoader')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesHeader",
								"type": "DatasetReference"
							},
							"name": "SalesHeader",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "SalesDetail",
								"type": "DatasetReference"
							},
							"name": "SalesDetail",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "SQLProdFromSales",
								"type": "DatasetReference"
							},
							"name": "DimProducts",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "Customer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LoadFacts",
								"type": "DatasetReference"
							},
							"name": "LoadFacts"
						}
					],
					"transformations": [
						{
							"name": "LookupCustomer"
						},
						{
							"name": "LookupProduct"
						},
						{
							"name": "CombineSalesTX"
						}
					],
					"script": "\n\nsource(output(\n\t\tSalesOrderID as integer,\n\t\tRevisionNumber as integer,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tStatus as integer,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tShipToAddressID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipMethod as string,\n\t\tCreditCardApprovalCode as string,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SalesHeader\nsource(output(\n\t\tSalesOrderID as integer,\n\t\tSalesOrderDetailID as integer,\n\t\tOrderQty as integer,\n\t\tProductID as integer,\n\t\tUnitPrice as decimal(19,4),\n\t\tUnitPriceDiscount as decimal(19,4),\n\t\tLineTotal as decimal(38,6),\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SalesDetail\nsource(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(19,4),\n\t\tListPrice as decimal(19,4),\n\t\t{_Inserted} as timestamp,\n\t\t{_LastUpdated} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimProducts\nsource(output(\n\t\tCustomerID as integer,\n\t\tNameStyle as boolean,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tSuffix as string,\n\t\tCompanyName as string,\n\t\tSalesPerson as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tPasswordHash as string,\n\t\tPasswordSalt as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimCustomer\nSalesHeader, DimCustomer lookup(SalesHeader@CustomerID == DimCustomer@CustomerID,\n\tbroadcast: 'none')~> LookupCustomer\nSalesDetail, DimProducts lookup(SalesDetail@ProductID == DimProducts@ProductID,\n\tbroadcast: 'none')~> LookupProduct\nLookupProduct, SalesHeader join(SalesDetail@SalesOrderID == SalesHeader@SalesOrderID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> CombineSalesTX\nCombineSalesTX sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tSalesOrderID = SalesDetail@SalesOrderID,\n\t\tOrderQty,\n\t\tProductID = SalesDetail@ProductID,\n\t\tUnitPrice,\n\t\tUnitPriceDiscount,\n\t\tLineTotal,\n\t\tModifiedDate = SalesDetail@ModifiedDate,\n\t\tName,\n\t\tProductNumber,\n\t\tShipDate,\n\t\tAccountNumber,\n\t\tCustomerID,\n\t\tSubTotal,\n\t\tTaxAmt,\n\t\tTotalDue\n\t)) ~> LoadFacts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SalesHeader')]",
				"[concat(variables('factoryId'), '/datasets/SalesDetail')]",
				"[concat(variables('factoryId'), '/datasets/SQLProdFromSales')]",
				"[concat(variables('factoryId'), '/datasets/Customer')]",
				"[concat(variables('factoryId'), '/datasets/LoadFacts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fixed Width')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Each parameter in this data flow is defined as 'start position', 'offset' as in '1,7'.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "fixedwidth",
								"type": "DatasetReference"
							},
							"name": "fixedsource1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MapFields"
						}
					],
					"script": "\nparameters{\n\tField1 as string ('1,7'),\n\tField2 as string ('8,8'),\n\tField3 as string ('15,10'),\n\tField4 as string ('25,11'),\n\tField5 as string ('36,10'),\n\tField6 as string ('46,12'),\n\tField7 as string ('58,1')\n}\nsource(output(\n\t\tColumn_1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> fixedsource1\nfixedsource1 derive(Field1 = substring(Column_1,toInteger(split($Field1,',')[1]),toInteger(split($Field1,',')[2])),\n\t\tField2 = substring(Column_1,toInteger(split($Field2,',')[1]),toInteger(split($Field2,',')[2])),\n\t\tField3 = substring(Column_1,toInteger(split($Field3,',')[1]),toInteger(split($Field3,',')[2])),\n\t\tField4 = substring(Column_1,toInteger(split($Field4,',')[1]),toInteger(split($Field4,',')[2])),\n\t\tField5 = substring(Column_1,toInteger(split($Field5,',')[1]),toInteger(split($Field5,',')[2])),\n\t\tField6 = substring(Column_1,toInteger(split($Field6,',')[1]),toInteger(split($Field6,',')[2])),\n\t\tField7 = substring(Column_1,toInteger(split($Field7,',')[1]),toInteger(split($Field7,',')[2])),\n\tpartitionBy('roundRobin', 2)) ~> MapFields\nMapFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['mysinglefile.csv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/fixedwidth')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JSONMovies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "JSONMoviesWithSchema",
								"type": "DatasetReference"
							},
							"name": "JSONSource",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesJSON",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Derivedcolumn1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovies as (genres as string[], movieid as string, rating as string, title as string, year as string)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> JSONSource\nJSONSource derive(movies = @(movieid=movies.movieid,\n\t\ttitle=movies.title,\n\t\tgenres=map(movies.genres,upper(#item)),\n\t\tyear=movies.year,\n\t\trating=movies.rating)) ~> Derivedcolumn1\nDerivedcolumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/JSONMoviesWithSchema')]",
				"[concat(variables('factoryId'), '/datasets/MoviesJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadFromStage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetMovies",
								"type": "DatasetReference"
							},
							"name": "StageSource",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesDW",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "CreateAggs"
						},
						{
							"name": "HashKey"
						},
						{
							"name": "FilterRows"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\tRottenTomato as integer,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'currentfilename') ~> StageSource\nStageSource aggregate(groupBy(year),\n\tratingByYear = round(avg((Rating * 5) + RottenTomato),2)) ~> CreateAggs\nCreateAggs derive(yearkey = crc32(year)) ~> HashKey\nHashKey alterRow(upsertIf(true())) ~> FilterRows\nFilterRows sink(input(\n\t\tyear as integer,\n\t\tratingByYear as double,\n\t\tyearkey as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tformat: 'table',\n\tkeys:['yearkey']) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParquetMovies')]",
				"[concat(variables('factoryId'), '/datasets/MoviesDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Loans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Loans",
								"type": "DatasetReference"
							},
							"name": "LoanSource",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "soccerOutput",
								"type": "DatasetReference"
							},
							"name": "SerializeOutput"
						}
					],
					"transformations": [
						{
							"name": "Filter1",
							"description": "Filter Loan Status and Valid States"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "\n\nsource(output(\n\t\tid as integer,\n\t\tmember_id as string,\n\t\tloan_amnt as string,\n\t\tfunded_amnt as string,\n\t\tfunded_amnt_inv as string,\n\t\tterm as string,\n\t\tint_rate as string,\n\t\tinstallment as string,\n\t\tgrade as string,\n\t\tsub_grade as string,\n\t\temp_title as string,\n\t\temp_length as string,\n\t\thome_ownership as string,\n\t\tannual_inc as decimal(10,0),\n\t\tverification_status as string,\n\t\tissue_d as string,\n\t\tloan_status as string,\n\t\tpymnt_plan as string,\n\t\turl as string,\n\t\tdesc as string,\n\t\tpurpose as string,\n\t\ttitle as string,\n\t\tzip_code as string,\n\t\taddr_state as string,\n\t\tdti as string,\n\t\tdelinq_2yrs as string,\n\t\tearliest_cr_line as string,\n\t\tinq_last_6mths as string,\n\t\tmths_since_last_delinq as string,\n\t\tmths_since_last_record as string,\n\t\topen_acc as string,\n\t\tpub_rec as string,\n\t\trevol_bal as string,\n\t\trevol_util as string,\n\t\ttotal_acc as string,\n\t\tinitial_list_status as string,\n\t\tout_prncp as string,\n\t\tout_prncp_inv as string,\n\t\ttotal_pymnt as string,\n\t\ttotal_pymnt_inv as string,\n\t\ttotal_rec_prncp as string,\n\t\ttotal_rec_int as string,\n\t\ttotal_rec_late_fee as string,\n\t\trecoveries as string,\n\t\tcollection_recovery_fee as string,\n\t\tlast_pymnt_d as string,\n\t\tlast_pymnt_amnt as string,\n\t\tnext_pymnt_d as string,\n\t\tlast_credit_pull_d as string,\n\t\tcollections_12_mths_ex_med as string,\n\t\tmths_since_last_major_derog as string,\n\t\tpolicy_code as string,\n\t\tapplication_type as string,\n\t\tannual_inc_joint as string,\n\t\tdti_joint as string,\n\t\tverification_status_joint as string,\n\t\tacc_now_delinq as string,\n\t\ttot_coll_amt as string,\n\t\ttot_cur_bal as string,\n\t\topen_acc_6m as string,\n\t\topen_il_6m as string,\n\t\topen_il_12m as string,\n\t\topen_il_24m as string,\n\t\tmths_since_rcnt_il as string,\n\t\ttotal_bal_il as string,\n\t\til_util as string,\n\t\topen_rv_12m as string,\n\t\topen_rv_24m as string,\n\t\tmax_bal_bc as string,\n\t\tall_util as string,\n\t\ttotal_rev_hi_lim as string,\n\t\tinq_fi as string,\n\t\ttotal_cu_tl as string,\n\t\tinq_last_12m as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> LoanSource\nLoanSource filter((loan_status == 'Default' || loan_status == 'Charged Off' || loan_status == 'Fully Paid')\r\n\r\n&&\r\n\r\nregexMatch(addr_state, '^(?:(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY]))$')) ~> Filter1\nFilter1 aggregate(groupBy(addr_state),\n\tratio = sum(annual_inc)) ~> Aggregate1\nAggregate1 derive(each(match(type=='decimal'), $$ + '_'+'new' = 1.06)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> SerializeOutput"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Loans')]",
				"[concat(variables('factoryId'), '/datasets/soccerOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupSurrogateKeyDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeFiles",
								"type": "DatasetReference"
							},
							"name": "EmpFile",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DimEmp",
								"type": "DatasetReference"
							},
							"name": "DimEmp",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CADOutput1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "AddSKtoMaxVal"
						},
						{
							"name": "JoinToAddMaxVal"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "\n\nsource(output(\n\t\tEmpID as string,\n\t\tRegion as string,\n\t\tStatus as string,\n\t\tFunction as string,\n\t\tLevel as string,\n\t\tRole as string,\n\t\tStartDate as string,\n\t\tEndDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:['SampleData/Emps/today/*.csv']) ~> EmpFile\nsource(output(\n\t\tmaxval as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select MAX(surrogatekey) as maxval from dbo.dimemp',\n\tformat: 'query') ~> DimEmp\nJoinToAddMaxVal keyGenerate(output(surrogatekey as long),\n\tstartAt: 1L) ~> SurrogateKey1\nAlterRow1 derive(surrogatekey = toInteger(surrogatekey) + toInteger(maxval)) ~> AddSKtoMaxVal\nEmpFile, DimEmp join(1 == 1,\n\tjoinType:'cross',\n\tbroadcast: 'none')~> JoinToAddMaxVal\nSurrogateKey1 alterRow() ~> AlterRow1\nAddSKtoMaxVal sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeFiles')]",
				"[concat(variables('factoryId'), '/datasets/DimEmp')]",
				"[concat(variables('factoryId'), '/datasets/CADOutput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeFiles')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "MergeFiles"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sales1",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "sales2",
								"type": "DatasetReference"
							},
							"name": "source2",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "NewAndUpdated"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Exists1"
						}
					],
					"script": "\n\nsource(output(\n\t\tID as string,\n\t\tTitle as string,\n\t\tCost as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource(output(\n\t\tID as string,\n\t\tTitle as string,\n\t\tCost as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source2\nsource1 derive(myhash = sha1(ID+Title+Cost)) ~> DerivedColumn1\nsource2 derive(myhash = sha1(ID+Title+Cost)) ~> DerivedColumn2\nDerivedColumn2, DerivedColumn1 exists(DerivedColumn2@myhash == DerivedColumn1@myhash,\n\tnegate:true,\n\tbroadcast: 'none')~> Exists1\nExists1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['combofile.csv'],\n\tmapColumn(\n\t\tID,\n\t\tTitle,\n\t\tCost\n\t),\n\tpartitionBy('hash', 1)) ~> NewAndUpdated"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sales1')]",
				"[concat(variables('factoryId'), '/datasets/sales2')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieDemo1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_source1",
								"type": "DatasetReference"
							},
							"name": "Movies",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_sink1",
								"type": "DatasetReference"
							},
							"name": "Output"
						}
					],
					"transformations": [
						{
							"name": "MoviesYear"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Movies\nMovies derive(year = toInteger(trim(right(title, 6), '()')),\n\t\ttitle = toString(left(title, length(title)-6))) ~> MoviesYear\nMoviesYear sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> Output"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source1')]",
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_sink1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MyLoansDemo1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesD2",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 derive(title = sha2(256, title)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesD2')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewMovieDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_source1",
								"type": "DatasetReference"
							},
							"name": "moviesource",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "deletebaddata"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as short,\n\t\tRating as short,\n\t\t{Rotton Tomato} as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> moviesource\nmoviesource alterRow(deleteIf(year<1900),\n\tupsertIf(true())) ~> deletebaddata\ndeletebaddata aggregate(groupBy(year),\n\tAverageRate = toDecimal(avg(Rating),10,2)) ~> Aggregate1\ndeletebaddata select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\tRating,\n\t\t{Rotton Tomato}\n\t)) ~> Select1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source1')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RankMovies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_source1",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Window1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 derive(dummy = 1,\n\t\tcombo = (Rating * 5) + {Rotton Tomato}) ~> DerivedColumn1\nDerivedColumn1 window(over(dummy),\n\tasc(combo, true),\n\tRANK = rank(combo)) ~> Window1\nWindow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source1')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RuleBasedDynamicColumnNames1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_source11",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutputContainer1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "RenameColumns"
						},
						{
							"name": "Casting"
						},
						{
							"name": "FixNames"
						},
						{
							"name": "RemoveOldNames"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nFixNames derive(each(match(type=='string'), $$ + '_trimmed' = trim(toString($$))),\n\t\teach(match(type=='integer'), 'int_' + $$ = toInteger($$))) ~> RenameColumns\nsource1 derive(year = toInteger(year),\n\t\tmovie = toInteger(movie),\n\t\tRating = toInteger(Rating),\n\t\t{Rotton Tomato} = toInteger({Rotton Tomato})) ~> Casting\nCasting select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\trating = Rating,\n\t\trottentomato = {Rotton Tomato}\n\t)) ~> FixNames\nRenameColumns select(mapColumn(\n\t\ttitle_trimmed,\n\t\tgenres_trimmed,\n\t\tint_movie,\n\t\tint_year,\n\t\tint_rating,\n\t\tint_rottentomato\n\t)) ~> RemoveOldNames\nRemoveOldNames sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source11')]",
				"[concat(variables('factoryId'), '/datasets/OutputContainer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType1withHash')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQLProducts_new",
								"type": "DatasetReference"
							},
							"name": "SQLProductsOLTP",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "prodfromsales3",
								"type": "DatasetReference"
							},
							"name": "StagingSource1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLprodstaging",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "CreateHash"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "SetAttributes"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "AlterRows"
						}
					],
					"script": "\n\nsource(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(19,4),\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tWeight as decimal(8,2),\n\t\tProductCategoryID as integer,\n\t\tProductModelID as integer,\n\t\tSellStartDate as timestamp,\n\t\tSellEndDate as timestamp,\n\t\tDiscontinuedDate as timestamp,\n\t\tThumbnailPhotoFileName as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SQLProductsOLTP\nsource(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(19,4),\n\t\tListPrice as decimal(19,4),\n\t\t{_Inserted} as timestamp,\n\t\t{_LastUpdated} as timestamp,\n\t\tDWhash as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingSource1\nSQLProductsOLTP derive(DWhash = sha1(Name+ProductNumber+Color)) ~> CreateHash\nCreateHash, StagingSource1 exists(SQLProductsOLTP@Name == StagingSource1@Name || StagingSource1@Color == SQLProductsOLTP@Color,\n\tnegate:true,\n\tbroadcast: 'none')~> Exists1\nLookup1 derive(Inserted = iif (isNull({_Inserted}),currentTimestamp(),{_Inserted}),\n\t\tUpdated = currentTimestamp()) ~> SetAttributes\nExists1, StagingSource1 lookup(SQLProductsOLTP@ProductID == StagingSource1@ProductID,\n\tbroadcast: 'none')~> Lookup1\nSetAttributes alterRow(upsertIf(true())) ~> AlterRows\nAlterRows sink(input(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(19,4),\n\t\tListPrice as decimal(19,4),\n\t\t{_Inserted} as timestamp,\n\t\t{_LastUpdated} as timestamp,\n\t\tDWhash as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tformat: 'table',\n\tkeys:['SQLProductsOLTP@ProductID'],\n\tmapColumn(\n\t\tProductID = SQLProductsOLTP@ProductID,\n\t\tName = SQLProductsOLTP@Name,\n\t\tProductNumber = SQLProductsOLTP@ProductNumber,\n\t\tColor = SQLProductsOLTP@Color,\n\t\tStandardCost = SQLProductsOLTP@StandardCost,\n\t\tListPrice = SQLProductsOLTP@ListPrice,\n\t\t{_Inserted} = Inserted,\n\t\t{_LastUpdated} = Updated,\n\t\tDWhash = CreateHash@DWhash\n\t),\n\tpartitionBy('roundRobin', 4)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLProducts_new')]",
				"[concat(variables('factoryId'), '/datasets/prodfromsales3')]",
				"[concat(variables('factoryId'), '/datasets/SQLprodstaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Demos"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQLProducts_new",
								"type": "DatasetReference"
							},
							"name": "SQLProducts",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DimProd_New",
								"type": "DatasetReference"
							},
							"name": "DimProd",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimProducts_new",
								"type": "DatasetReference"
							},
							"name": "loadADW"
						}
					],
					"transformations": [
						{
							"name": "LookupKeys"
						},
						{
							"name": "ColumnSelection"
						},
						{
							"name": "NewRowOrExistingMember"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "SetAttributes"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "\n\nsource(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(19,4),\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tWeight as decimal(8,2),\n\t\tProductCategoryID as integer,\n\t\tProductModelID as integer,\n\t\tSellStartDate as timestamp,\n\t\tSellEndDate as timestamp,\n\t\tDiscontinuedDate as timestamp,\n\t\tThumbnailPhotoFileName as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SQLProducts\nsource(output(\n\t\tProductKey as integer,\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as integer,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tSpanishProductName as string,\n\t\tFrenchProductName as string,\n\t\tStandardCost as decimal(19,4),\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as integer,\n\t\tReorderPoint as integer,\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tSizeRange as string,\n\t\tWeight as double,\n\t\tDaysToManufacture as integer,\n\t\tProductLine as string,\n\t\tDealerPrice as decimal(19,4),\n\t\tClass as string,\n\t\tStyle as string,\n\t\tModelName as string,\n\t\tEnglishDescription as string,\n\t\tFrenchDescription as string,\n\t\tChineseDescription as string,\n\t\tArabicDescription as string,\n\t\tHebrewDescription as string,\n\t\tThaiDescription as string,\n\t\tGermanDescription as string,\n\t\tJapaneseDescription as string,\n\t\tTurkishDescription as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimProd\nFilter1, DimProd lookup(ProductID == ProductKey,\n\tbroadcast: 'none')~> LookupKeys\nLookupKeys select(mapColumn(\n\t\tProductID,\n\t\tName,\n\t\tProductNumber,\n\t\tColor = SQLProducts@Color,\n\t\tStandardCost = SQLProducts@StandardCost,\n\t\tListPrice = SQLProducts@ListPrice,\n\t\tSize = SQLProducts@Size,\n\t\tWeight = SQLProducts@Weight,\n\t\tProductKey,\n\t\tProductAlternateKey,\n\t\tProductSubcategoryKey,\n\t\tWeightUnitMeasureCode,\n\t\tSizeUnitMeasureCode,\n\t\tEnglishProductName,\n\t\tSafetyStockLevel,\n\t\tReorderPoint,\n\t\tSizeRange,\n\t\tDaysToManufacture,\n\t\tProductLine,\n\t\tDealerPrice,\n\t\tClass,\n\t\tStyle,\n\t\tModelName,\n\t\tEnglishDescription,\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus\n\t)) ~> ColumnSelection\nColumnSelection split(isNull(ProductAlternateKey),\n\tdisjoint: false) ~> NewRowOrExistingMember@(NewRow, ExistingMember)\nNewRowOrExistingMember@NewRow keyGenerate(output(surrogatekey as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 derive(surrogatekey = crc32(surrogatekey)) ~> SetAttributes\nSQLProducts filter(regexMatch(Name,'^s')) ~> Filter1\nSetAttributes sink(input(\n\t\tProductKey as integer,\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as integer,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tSpanishProductName as string,\n\t\tFrenchProductName as string,\n\t\tStandardCost as decimal(19,4),\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as integer,\n\t\tReorderPoint as integer,\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tSizeRange as string,\n\t\tWeight as double,\n\t\tDaysToManufacture as integer,\n\t\tProductLine as string,\n\t\tDealerPrice as decimal(19,4),\n\t\tClass as string,\n\t\tStyle as string,\n\t\tModelName as string,\n\t\tEnglishDescription as string,\n\t\tFrenchDescription as string,\n\t\tChineseDescription as string,\n\t\tArabicDescription as string,\n\t\tHebrewDescription as string,\n\t\tThaiDescription as string,\n\t\tGermanDescription as string,\n\t\tJapaneseDescription as string,\n\t\tTurkishDescription as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: false,\n\tmapColumn(\n\t\tProductKey,\n\t\tProductAlternateKey,\n\t\tProductSubcategoryKey,\n\t\tWeightUnitMeasureCode,\n\t\tSizeUnitMeasureCode,\n\t\tEnglishProductName,\n\t\tStandardCost,\n\t\tColor,\n\t\tSafetyStockLevel,\n\t\tReorderPoint,\n\t\tListPrice,\n\t\tSize,\n\t\tSizeRange,\n\t\tWeight,\n\t\tDaysToManufacture,\n\t\tProductLine,\n\t\tDealerPrice,\n\t\tClass,\n\t\tStyle,\n\t\tModelName,\n\t\tEnglishDescription,\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus\n\t)) ~> loadADW"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLProducts_new')]",
				"[concat(variables('factoryId'), '/datasets/DimProd_New')]",
				"[concat(variables('factoryId'), '/datasets/DimProducts_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SearchLog')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "searchLog",
								"type": "DatasetReference"
							},
							"name": "searchLog",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_sink1",
								"type": "DatasetReference"
							},
							"name": "sinkIntoDW"
						}
					],
					"transformations": [
						{
							"name": "totalDurationByRegion"
						},
						{
							"name": "RenameColumns"
						},
						{
							"name": "DateFilter"
						},
						{
							"name": "ConvertDate"
						},
						{
							"name": "DurationFilter"
						}
					],
					"script": "\n\nsource(output(\n\t\t{_col0_} as integer,\n\t\t{_col1_} as string,\n\t\t{_col2_} as string,\n\t\t{_col3_} as string,\n\t\t{_col4_} as integer,\n\t\t{_col5_} as string,\n\t\t{_col6_} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> searchLog\nDateFilter aggregate(groupBy(region),\n\ttotalduration = sum(duration)) ~> totalDurationByRegion\nsearchLog select(mapColumn(\n\t\tuserid = {_col0_},\n\t\tstart = {_col1_},\n\t\tregion = {_col2_},\n\t\tquery = {_col3_},\n\t\tduration = {_col4_},\n\t\turls = {_col5_},\n\t\tclickedurls = {_col6_}\n\t)) ~> RenameColumns\nConvertDate filter(newdate > toDate('2012-02-06','yyyy-MM-dd')) ~> DateFilter\nRenameColumns derive(newdate = toDate(left(start,instr(start,' ')-1),'MM/dd/yyyy')) ~> ConvertDate\ntotalDurationByRegion filter(totalduration > 200) ~> DurationFilter\nDurationFilter sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sinkIntoDW"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/searchLog')]",
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_sink1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StageData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_source1",
								"type": "DatasetReference"
							},
							"name": "FileSource",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetStage",
								"type": "DatasetReference"
							},
							"name": "StageData"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> FileSource\nSelect1 derive(dateOfETL = currentDate()) ~> DerivedColumn1\nFileSource select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\tRating,\n\t\tRottenTomato = {Rotton Tomato}\n\t)) ~> Select1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tfilePattern:'movies[n].parquet',\n\ttruncate: true,\n\tpartitionBy('roundRobin', 10)) ~> StageData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source1')]",
				"[concat(variables('factoryId'), '/datasets/ParquetStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cleanAddresses')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Loans",
								"type": "DatasetReference"
							},
							"name": "loans",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "products",
								"type": "DatasetReference"
							},
							"name": "products",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "soccerOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Union1"
						}
					],
					"script": "\n\nsource(output(\n\t\tid as string,\n\t\tmember_id as string,\n\t\tloan_amnt as string,\n\t\tfunded_amnt as string,\n\t\tfunded_amnt_inv as string,\n\t\tterm as string,\n\t\tint_rate as string,\n\t\tinstallment as string,\n\t\tgrade as string,\n\t\tsub_grade as string,\n\t\temp_title as string,\n\t\temp_length as string,\n\t\thome_ownership as string,\n\t\tannual_inc as string,\n\t\tverification_status as string,\n\t\tissue_d as string,\n\t\tloan_status as string,\n\t\tpymnt_plan as string,\n\t\turl as string,\n\t\tdesc as string,\n\t\tpurpose as string,\n\t\ttitle as string,\n\t\tzip_code as string,\n\t\taddr_state as string,\n\t\tdti as string,\n\t\tdelinq_2yrs as string,\n\t\tearliest_cr_line as string,\n\t\tinq_last_6mths as string,\n\t\tmths_since_last_delinq as string,\n\t\tmths_since_last_record as string,\n\t\topen_acc as string,\n\t\tpub_rec as string,\n\t\trevol_bal as string,\n\t\trevol_util as string,\n\t\ttotal_acc as string,\n\t\tinitial_list_status as string,\n\t\tout_prncp as string,\n\t\tout_prncp_inv as string,\n\t\ttotal_pymnt as string,\n\t\ttotal_pymnt_inv as string,\n\t\ttotal_rec_prncp as string,\n\t\ttotal_rec_int as string,\n\t\ttotal_rec_late_fee as string,\n\t\trecoveries as string,\n\t\tcollection_recovery_fee as string,\n\t\tlast_pymnt_d as string,\n\t\tlast_pymnt_amnt as string,\n\t\tnext_pymnt_d as string,\n\t\tlast_credit_pull_d as string,\n\t\tcollections_12_mths_ex_med as string,\n\t\tmths_since_last_major_derog as string,\n\t\tpolicy_code as string,\n\t\tapplication_type as string,\n\t\tannual_inc_joint as string,\n\t\tdti_joint as string,\n\t\tverification_status_joint as string,\n\t\tacc_now_delinq as string,\n\t\ttot_coll_amt as string,\n\t\ttot_cur_bal as string,\n\t\topen_acc_6m as string,\n\t\topen_il_6m as string,\n\t\topen_il_12m as string,\n\t\topen_il_24m as string,\n\t\tmths_since_rcnt_il as string,\n\t\ttotal_bal_il as string,\n\t\til_util as string,\n\t\topen_rv_12m as string,\n\t\topen_rv_24m as string,\n\t\tmax_bal_bc as string,\n\t\tall_util as string,\n\t\ttotal_rev_hi_lim as string,\n\t\tinq_fi as string,\n\t\ttotal_cu_tl as string,\n\t\tinq_last_12m as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> loans\nsource(output(\n\t\tProductID as string,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as string,\n\t\tListPrice as string,\n\t\tSize as string,\n\t\tWeight as string,\n\t\tProductCategoryID as string,\n\t\tProductModelID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> products\nloans, products union(byName: false)~> Union1\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['unionout.csv'],\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Loans')]",
				"[concat(variables('factoryId'), '/datasets/products')]",
				"[concat(variables('factoryId'), '/datasets/soccerOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_params1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Params"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeFiles",
								"type": "DatasetReference"
							},
							"name": "DataSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "paramsfile",
								"type": "DatasetReference"
							},
							"name": "ParamsFile",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "partout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ParseFileName"
						},
						{
							"name": "Join1"
						},
						{
							"name": "SelectCols"
						},
						{
							"name": "FilterToday"
						}
					],
					"script": "\nparameters{\n\tmyparam as string\n}\nsource(output(\n\t\tEmpID as string,\n\t\tRegion as string,\n\t\tStatus as string,\n\t\tFunction as string,\n\t\tLevel as string,\n\t\tRole as string,\n\t\tStartDate as string,\n\t\tEndDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:['SampleData/Emps/today/*.csv']) ~> DataSource\nsource(output(\n\t\tColumn_1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> ParamsFile\nParamsFile derive(filedate = split(Column_1,'=')[1],\n\t\tfilename = 'output/parts/'+split(Column_1,'=')[2]) ~> ParseFileName\nDataSource, FilterToday join(1 == 1,\n\tjoinType:'cross',\n\tbroadcast: 'none')~> Join1\nJoin1 select(mapColumn(\n\t\tEmpID,\n\t\tRegion,\n\t\tStatus,\n\t\tFunction,\n\t\tLevel,\n\t\tRole,\n\t\tStartDate,\n\t\tEndDate,\n\t\tfilename\n\t)) ~> SelectCols\nParseFileName filter(instr(filedate,toString(currentDate(),'MM-dd-yy')) > 0) ~> FilterToday\nSelectCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'filename',\n\ttruncate: true,\n\tmapColumn(\n\t\tEmpID,\n\t\tRegion,\n\t\tStatus,\n\t\tFunction,\n\t\tLevel,\n\t\tRole,\n\t\tStartDate,\n\t\tEndDate\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeFiles')]",
				"[concat(variables('factoryId'), '/datasets/paramsfile')]",
				"[concat(variables('factoryId'), '/datasets/partout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbUpdates')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "newbattingtable_sql",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable6",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "\n\nsource(output(\n\t\tplayerID_yearID as string,\n\t\tBA as double,\n\t\tOBP as double,\n\t\tSLG as double,\n\t\tTB as integer,\n\t\tbirthYear as string,\n\t\tbirthMonth as string,\n\t\tbirthDay as string,\n\t\tbirthCountry as string,\n\t\tbirthState as string,\n\t\tbirthCity as string,\n\t\tdeathYear as string,\n\t\tdeathMonth as string,\n\t\tdeathDay as string,\n\t\tdeathCountry as string,\n\t\tdeathState as string,\n\t\tdeathCity as string,\n\t\tnameFirst as string,\n\t\tnameLast as string,\n\t\tnameGiven as string,\n\t\tweight as string,\n\t\theight as string,\n\t\tbats as string,\n\t\tthrows as string,\n\t\tdebut as string,\n\t\tfinalGame as string,\n\t\tretroID as string,\n\t\tbbrefID as string,\n\t\tplayerID as string,\n\t\tyearID as string,\n\t\tstint as string,\n\t\tteamID as string,\n\t\tlgID as string,\n\t\tG as integer,\n\t\tAB as integer,\n\t\tR as integer,\n\t\tH as integer,\n\t\tH2B as integer,\n\t\tH3B as integer,\n\t\tHR as integer,\n\t\tRBI as integer,\n\t\tSB as integer,\n\t\tCS as integer,\n\t\tBB as integer,\n\t\tSO as integer,\n\t\tIBB as integer,\n\t\tHBP as integer,\n\t\tSH as integer,\n\t\tSF as integer,\n\t\tGIDP as integer,\n\t\tcurrenttime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tbatchSize: 1000,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tpartitionColumn: 'playerID_yearID',\n\tpartitionBy('external', 10)) ~> source1\nsource1 derive(nameLast = reverse(nameLast)) ~> DerivedColumn1\nDerivedColumn1 alterRow(updateIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tformat: 'table',\n\tkeys:['playerID_yearID']) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/newbattingtable_sql')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable6')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/debugdemo1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesD2",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 derive(title = sha2(256,title)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesD2')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dedupeProb2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "names100",
								"type": "DatasetReference"
							},
							"name": "sourceName",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dupefolder",
								"type": "DatasetReference"
							},
							"name": "sinkDupes"
						},
						{
							"dataset": {
								"referenceName": "dupefolder",
								"type": "DatasetReference"
							},
							"name": "sinkNoDupes"
						}
					],
					"transformations": [
						{
							"name": "FuzzyMatch"
						},
						{
							"name": "groupSoundex"
						},
						{
							"name": "Orig1"
						},
						{
							"name": "soundexJoin"
						},
						{
							"name": "soundexBranch"
						},
						{
							"name": "groupPhone"
						},
						{
							"name": "phoneBranch"
						},
						{
							"name": "phoneJoin"
						},
						{
							"name": "groupZip"
						},
						{
							"name": "zipBranch"
						},
						{
							"name": "zipJoin"
						},
						{
							"name": "setConstants"
						},
						{
							"name": "matchScore"
						},
						{
							"name": "finalResult"
						},
						{
							"name": "MapNames"
						},
						{
							"name": "CreateFullName"
						},
						{
							"name": "CheckForDupes"
						}
					],
					"script": "\n\nsource(output(\n\t\t{Emp ID} as string,\n\t\t{Name Prefix} as string,\n\t\t{First Name} as string,\n\t\t{Middle Initial} as string,\n\t\t{Last Name} as string,\n\t\tGender as string,\n\t\t{E Mail} as string,\n\t\t{Father's Name} as string,\n\t\t{Mother's Name} as string,\n\t\t{Mother's Maiden Name} as string,\n\t\t{Date of Birth} as string,\n\t\t{Time of Birth} as string,\n\t\t{Age in Yrs.} as double '##.##',\n\t\t{Weight in Kgs.} as string,\n\t\t{Date of Joining} as string,\n\t\t{Quarter of Joining} as string,\n\t\t{Half of Joining} as string,\n\t\t{Year of Joining} as string,\n\t\t{Month of Joining} as string,\n\t\t{Month Name of Joining} as string,\n\t\t{Short Month} as string,\n\t\t{Day of Joining} as string,\n\t\t{DOW of Joining} as string,\n\t\t{Short DOW} as string,\n\t\t{Age in Company (Years)} as string,\n\t\tSalary as integer,\n\t\t{Last % Hike} as string,\n\t\tSSN as string,\n\t\t{Phone No. } as string,\n\t\t{Place Name} as string,\n\t\tCounty as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tZip as string,\n\t\tRegion as string,\n\t\t{User Name} as string,\n\t\tPassword as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> sourceName\nMapNames derive(SoundexValue = soundex(fullname)) ~> FuzzyMatch\nOrig1 aggregate(groupBy(SoundexValue),\n\tsoundexmatch = sum(1)) ~> groupSoundex\nFuzzyMatch select(mapColumn(\n\t\tacctnum,\n\t\tfullname,\n\t\tphone,\n\t\tzip,\n\t\tSoundexValue\n\t)) ~> Orig1\ngroupSoundex, soundexBranch join(groupSoundex@SoundexValue == soundexBranch@SoundexValue,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> soundexJoin\nFuzzyMatch select(mapColumn(\n\t\tacctnum,\n\t\tfullname,\n\t\tphone,\n\t\tzip,\n\t\tSoundexValue\n\t)) ~> soundexBranch\nsoundexJoin aggregate(groupBy(phone,\n\t\tsoundexBranch@SoundexValue),\n\tphonematch = sum(1),\n\t\tacctnum_agg = last(acctnum)) ~> groupPhone\nsoundexJoin select(mapColumn(\n\t\tsoundexmatch,\n\t\tacctnum,\n\t\tfullname,\n\t\tphone,\n\t\tzip,\n\t\tSoundexValue = soundexBranch@SoundexValue\n\t)) ~> phoneBranch\ngroupPhone, phoneBranch join(acctnum_agg == acctnum,\n\tjoinType:'right',\n\tbroadcast: 'none')~> phoneJoin\nphoneJoin aggregate(groupBy(zip,\n\t\tphoneBranch@SoundexValue),\n\tzipcount = sum(1),\n\t\tacctnum_agg = last(acctnum_agg)) ~> groupZip\nphoneJoin select(mapColumn(\n\t\tphonematch,\n\t\tsoundexmatch,\n\t\tacctnum,\n\t\tfullname,\n\t\tphone = phoneBranch@phone,\n\t\tzip,\n\t\tSoundexValue = phoneBranch@SoundexValue\n\t)) ~> zipBranch\ngroupZip, zipBranch join(acctnum_agg == acctnum,\n\tjoinType:'right',\n\tbroadcast: 'none')~> zipJoin\nzipJoin derive(soundexweight = 50,\n\t\tzipweight = 25,\n\t\tphoneweight = 25,\n\t\tsoundexbool = iif (soundexmatch > 1, 1, 0),\n\t\tzipbool = iif (zipcount > 1, 1, 0),\n\t\tphonebool = iif (phonematch > 1, 1, 0)) ~> setConstants\nsetConstants derive(matchscore = (soundexbool * 50) + (zipbool * 25) + (phonebool * 25)) ~> matchScore\nmatchScore select(mapColumn(\n\t\tphone,\n\t\tacctnum,\n\t\tfullname,\n\t\tzip = zipBranch@zip,\n\t\tmatchscore\n\t)) ~> finalResult\nCreateFullName select(mapColumn(\n\t\tphone = {Phone No. },\n\t\tzip = Zip,\n\t\tfullname,\n\t\tacctnum = {Emp ID}\n\t),\n\tpartitionBy('hash', 2,\n\t\tERROR_FUNCTION('')\n\t)) ~> MapNames\nsourceName derive(fullname = {First Name} + ' ' + {Last Name}) ~> CreateFullName\nfinalResult split(matchscore > 50,\n\tdisjoint: false) ~> CheckForDupes@(Duplicates, NotDupe)\nCheckForDupes@Duplicates sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['dupes.csv']) ~> sinkDupes\nCheckForDupes@NotDupe sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['nodupes.csv']) ~> sinkNoDupes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/names100')]",
				"[concat(variables('factoryId'), '/datasets/dupefolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deleteRows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesSQLDB",
								"type": "DatasetReference"
							},
							"name": "sourceSQLDatabase",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSQLDB",
								"type": "DatasetReference"
							},
							"name": "deleteRows"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "\nparameters{\n\tmovieName as string\n}\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sourceSQLDatabase\nsourceSQLDatabase alterRow(deleteIf(title==$movieName)) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tkeys:['movie'],\n\tpartitionBy('roundRobin', 2)) ~> deleteRows"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/errorHandling')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesD2",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "errorRows"
						},
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "goodRows"
						}
					],
					"transformations": [
						{
							"name": "typeConversions"
						},
						{
							"name": "checkForNulls"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 derive(movie = toInteger(movie),\n\t\tnewtitle = toInteger(title)) ~> typeConversions\ntypeConversions split(isNull(movie) || isNull(newtitle),\n\tdisjoint: false) ~> checkForNulls@(errorRows, goodRows)\ncheckForNulls@errorRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['errorRows.csv'],\n\tpartitionBy('hash', 1)) ~> errorRows\ncheckForNulls@goodRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['goodRows.csv'],\n\tpartitionBy('hash', 1)) ~> goodRows"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesD2')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/federatedDatasets')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_source11",
								"type": "DatasetReference"
							},
							"name": "moviescsv",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "moviestage2",
								"type": "DatasetReference"
							},
							"name": "moviesdb",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "moviesoutnew_parquet2",
								"type": "DatasetReference"
							},
							"name": "moviesparquet",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "RemoveColumns1",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "Sort1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> moviescsv\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\tRottenTomato as integer,\n\t\t{Rotton Tomato} as string,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> moviesdb\nsource(output(\n\t\tMovieIdDupe as integer,\n\t\tActionDupe as string,\n\t\tMovieId as integer,\n\t\tTitle as string,\n\t\tGenre as string,\n\t\tYear as integer,\n\t\tRating as integer,\n\t\tRottenTom as integer,\n\t\tAction as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> moviesparquet\nmoviescsv, moviesdb join(moviescsv@movie == moviesdb@movie,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1\nJoin1, moviesparquet join(toInteger(moviescsv@movie) == MovieId,\n\tjoinType:'left',\n\tbroadcast: 'none')~> Join2\nJoin2 select(mapColumn(\n\t\tmovie = moviescsv@movie,\n\t\ttitle = moviescsv@title,\n\t\tyear = moviescsv@year,\n\t\tRating = moviescsv@Rating,\n\t\tmovie = moviesdb@movie,\n\t\tyear = moviesdb@year,\n\t\tRating = moviesdb@Rating,\n\t\tRottenTomato,\n\t\tdateOfETL,\n\t\tMovieIdDupe,\n\t\tActionDupe,\n\t\tMovieId,\n\t\tGenre,\n\t\tRating = moviesparquet@Rating,\n\t\tRottenTom,\n\t\tAction\n\t),\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(movieagg = movie),\n\teach(match(true()), $$ = first(toString($$)))) ~> Aggregate1\nAggregate1 derive(year = toInteger(year),\n\t\tRating = toInteger(Rating)) ~> ModifyColumns1\nModifyColumns1 select(mapColumn(\n\t\tmovieagg,\n\t\tmovie,\n\t\ttitle,\n\t\tyear,\n\t\tRating,\n\t\tRottenTomato,\n\t\tdateOfETL,\n\t\tMovieId,\n\t\tGenre,\n\t\tAction\n\t),\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns1\nRemoveColumns1 sort(asc(year, true)) ~> Sort1\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source11')]",
				"[concat(variables('factoryId'), '/datasets/moviestage2')]",
				"[concat(variables('factoryId'), '/datasets/moviesoutnew_parquet2')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fileUpdates')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Loans",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutputContainer1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "\n\nsource(output(\n\t\tid as string,\n\t\tmember_id as string,\n\t\tloan_amnt as string,\n\t\tfunded_amnt as string,\n\t\tfunded_amnt_inv as string,\n\t\tterm as string,\n\t\tint_rate as string,\n\t\tinstallment as string,\n\t\tgrade as string,\n\t\tsub_grade as string,\n\t\temp_title as string,\n\t\temp_length as string,\n\t\thome_ownership as string,\n\t\tannual_inc as string,\n\t\tverification_status as string,\n\t\tissue_d as string,\n\t\tloan_status as string,\n\t\tpymnt_plan as string,\n\t\turl as string,\n\t\tdesc as string,\n\t\tpurpose as string,\n\t\ttitle as string,\n\t\tzip_code as string,\n\t\taddr_state as string,\n\t\tdti as string,\n\t\tdelinq_2yrs as string,\n\t\tearliest_cr_line as string,\n\t\tinq_last_6mths as string,\n\t\tmths_since_last_delinq as string,\n\t\tmths_since_last_record as string,\n\t\topen_acc as string,\n\t\tpub_rec as string,\n\t\trevol_bal as string,\n\t\trevol_util as string,\n\t\ttotal_acc as string,\n\t\tinitial_list_status as string,\n\t\tout_prncp as string,\n\t\tout_prncp_inv as string,\n\t\ttotal_pymnt as string,\n\t\ttotal_pymnt_inv as string,\n\t\ttotal_rec_prncp as string,\n\t\ttotal_rec_int as string,\n\t\ttotal_rec_late_fee as string,\n\t\trecoveries as string,\n\t\tcollection_recovery_fee as string,\n\t\tlast_pymnt_d as string,\n\t\tlast_pymnt_amnt as string,\n\t\tnext_pymnt_d as string,\n\t\tlast_credit_pull_d as string,\n\t\tcollections_12_mths_ex_med as string,\n\t\tmths_since_last_major_derog as string,\n\t\tpolicy_code as string,\n\t\tapplication_type as string,\n\t\tannual_inc_joint as string,\n\t\tdti_joint as string,\n\t\tverification_status_joint as string,\n\t\tacc_now_delinq as string,\n\t\ttot_coll_amt as string,\n\t\ttot_cur_bal as string,\n\t\topen_acc_6m as string,\n\t\topen_il_6m as string,\n\t\topen_il_12m as string,\n\t\topen_il_24m as string,\n\t\tmths_since_rcnt_il as string,\n\t\ttotal_bal_il as string,\n\t\til_util as string,\n\t\topen_rv_12m as string,\n\t\topen_rv_24m as string,\n\t\tmax_bal_bc as string,\n\t\tall_util as string,\n\t\ttotal_rev_hi_lim as string,\n\t\tinq_fi as string,\n\t\ttotal_cu_tl as string,\n\t\tinq_last_12m as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionBy('roundRobin', 200)) ~> source1\nsource1 derive(emp_title = reverse(emp_title)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Loans')]",
				"[concat(variables('factoryId'), '/datasets/OutputContainer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filesplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Loans",
								"type": "DatasetReference"
							},
							"name": "OneBigLoansFile",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CADOutput1",
								"type": "DatasetReference"
							},
							"name": "ManySmallerLoansParts"
						}
					],
					"transformations": [],
					"script": "\n\nsource(output(\n\t\tid as string,\n\t\tmember_id as string,\n\t\tloan_amnt as string,\n\t\tfunded_amnt as string,\n\t\tfunded_amnt_inv as string,\n\t\tterm as string,\n\t\tint_rate as string,\n\t\tinstallment as string,\n\t\tgrade as string,\n\t\tsub_grade as string,\n\t\temp_title as string,\n\t\temp_length as string,\n\t\thome_ownership as string,\n\t\tannual_inc as string,\n\t\tverification_status as string,\n\t\tissue_d as string,\n\t\tloan_status as string,\n\t\tpymnt_plan as string,\n\t\turl as string,\n\t\tdesc as string,\n\t\tpurpose as string,\n\t\ttitle as string,\n\t\tzip_code as string,\n\t\taddr_state as string,\n\t\tdti as string,\n\t\tdelinq_2yrs as string,\n\t\tearliest_cr_line as string,\n\t\tinq_last_6mths as string,\n\t\tmths_since_last_delinq as string,\n\t\tmths_since_last_record as string,\n\t\topen_acc as string,\n\t\tpub_rec as string,\n\t\trevol_bal as string,\n\t\trevol_util as string,\n\t\ttotal_acc as string,\n\t\tinitial_list_status as string,\n\t\tout_prncp as string,\n\t\tout_prncp_inv as string,\n\t\ttotal_pymnt as string,\n\t\ttotal_pymnt_inv as string,\n\t\ttotal_rec_prncp as string,\n\t\ttotal_rec_int as string,\n\t\ttotal_rec_late_fee as string,\n\t\trecoveries as string,\n\t\tcollection_recovery_fee as string,\n\t\tlast_pymnt_d as string,\n\t\tlast_pymnt_amnt as string,\n\t\tnext_pymnt_d as string,\n\t\tlast_credit_pull_d as string,\n\t\tcollections_12_mths_ex_med as string,\n\t\tmths_since_last_major_derog as string,\n\t\tpolicy_code as string,\n\t\tapplication_type as string,\n\t\tannual_inc_joint as string,\n\t\tdti_joint as string,\n\t\tverification_status_joint as string,\n\t\tacc_now_delinq as string,\n\t\ttot_coll_amt as string,\n\t\ttot_cur_bal as string,\n\t\topen_acc_6m as string,\n\t\topen_il_6m as string,\n\t\topen_il_12m as string,\n\t\topen_il_24m as string,\n\t\tmths_since_rcnt_il as string,\n\t\ttotal_bal_il as string,\n\t\til_util as string,\n\t\topen_rv_12m as string,\n\t\topen_rv_24m as string,\n\t\tmax_bal_bc as string,\n\t\tall_util as string,\n\t\ttotal_rev_hi_lim as string,\n\t\tinq_fi as string,\n\t\ttotal_cu_tl as string,\n\t\tinq_last_12m as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'myfilename') ~> OneBigLoansFile\nOneBigLoansFile sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tfilePattern:'loans[n].csv',\n\ttruncate: true,\n\tpartitionBy('roundRobin', 20)) ~> ManySmallerLoansParts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Loans')]",
				"[concat(variables('factoryId'), '/datasets/CADOutput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fuzzyLookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesD2",
								"type": "DatasetReference"
							},
							"name": "moviesCSV",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "moviesoutnew_parquet2",
								"type": "DatasetReference"
							},
							"name": "moviesParquet",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "PruneCols1"
						},
						{
							"name": "PruneCols2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "FilterBadRows"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> moviesCSV\nsource(output(\n\t\tMovieIdDupe as integer,\n\t\tActionDupe as string,\n\t\tMovieId as integer,\n\t\tTitle as string,\n\t\tGenre as string,\n\t\tYear as integer,\n\t\tRating as integer,\n\t\tRottenTom as integer,\n\t\tAction as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> moviesParquet\nmoviesCSV select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\tRating\n\t)) ~> PruneCols1\nmoviesParquet select(mapColumn(\n\t\tTitle2 = Title,\n\t\tRottenTom,\n\t\tYear2 = Year\n\t)) ~> PruneCols2\nPruneCols1, PruneCols2 join(soundex(title) == soundex(Title2)\n\t&& toInteger(year) == Year2,\n\tjoinType:'left',\n\tbroadcast: 'none')~> Join1\nJoin1 filter((!isNull(Title2) && !isNull(title)) && toInteger(year) > 1900) ~> FilterBadRows\nFilterBadRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['fuzzylookup.csv'],\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesD2')]",
				"[concat(variables('factoryId'), '/datasets/moviesoutnew_parquet2')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesCsvToJSON')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesD2",
								"type": "DatasetReference"
							},
							"name": "moviesCSV",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesJSON",
								"type": "DatasetReference"
							},
							"name": "makeJSON"
						}
					],
					"transformations": [
						{
							"name": "MakeHierarchy"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> moviesCSV\nmoviesCSV derive(movies = @(movieid=movie,\n\t\ttitle=title,\n\t\tgenres=split(genres,'|'),\n\t\tyear=year,\n\t\trating=Rating)) ~> MakeHierarchy\nMakeHierarchy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['movies.json'],\n\tmapColumn(\n\t\tmovies\n\t),\n\tpartitionBy('hash', 1)) ~> makeJSON"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesD2')]",
				"[concat(variables('factoryId'), '/datasets/MoviesJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/paramQuery')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQLProducts_new",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "\nparameters{\n\tprodid as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (concat('select * from saleslt.product  where productid = ',$prodid)),\n\tformat: 'query') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tfilePattern:($prodid + '.csv'),\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLProducts_new')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/paramWilcards')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dummyContainer",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "\nparameters{\n\tmywildpath as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:[('DateFiles/'+$mywildpath)]) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dummyContainer')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquetFileCrud')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movieupdates_parquet",
								"type": "DatasetReference"
							},
							"name": "movieDailyUpdate",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "moviesoutnew_parquet2",
								"type": "DatasetReference"
							},
							"name": "movieOrig",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "moviesoutputfolder_parquet",
								"type": "DatasetReference"
							},
							"name": "moviesOutParquetFolder"
						}
					],
					"transformations": [
						{
							"name": "SetFields"
						},
						{
							"name": "Casting"
						}
					],
					"script": "\n\nsource(output(\n\t\tProp_0 as string,\n\t\tProp_1 as string,\n\t\tProp_2 as string,\n\t\tProp_3 as string,\n\t\tProp_4 as string,\n\t\tProp_5 as string,\n\t\tProp_6 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionBy('key',\n\t\t0,\n\t\tProp_0\n\t)) ~> movieDailyUpdate\nsource(output(\n\t\tMovieIdDupe as integer,\n\t\tActionDupe as string,\n\t\tMovieId as integer,\n\t\tTitle as string,\n\t\tGenre as string,\n\t\tYear as integer,\n\t\tRating as integer,\n\t\tRottenTom as integer,\n\t\tAction as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> movieOrig\nmovieDailyUpdate select(mapColumn(\n\t\tmovie = Prop_0,\n\t\ttitle = Prop_1,\n\t\tgenre = Prop_2,\n\t\tyear = Prop_3,\n\t\trating = Prop_4,\n\t\trottom = Prop_5,\n\t\taction = Prop_6\n\t)) ~> SetFields\nSetFields derive(each(match(lower(name)=='movie'||lower(name)=='year'||lower(name)=='rating'||lower(name)=='rottom'), $$ = toInteger($$))) ~> Casting\nCasting sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tmapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenre,\n\t\tyear,\n\t\trating,\n\t\trottom\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tmovie\n\t)) ~> moviesOutParquetFolder"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movieupdates_parquet')]",
				"[concat(variables('factoryId'), '/datasets/moviesoutnew_parquet2')]",
				"[concat(variables('factoryId'), '/datasets/moviesoutputfolder_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/partdata')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Parquet3",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Myprojection",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "\n\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'myfilename',\n\tpartitionRootPath: 'partdata',\n\twildcardPaths:['partdata/**/**/*.parquet']) ~> source1\nFilter1 derive(Title = reverse(Title)) ~> DerivedColumn1\nsource1 derive(MovieIdDupe = toInteger(byName('MovieIdDupe')),\n\t\tActionDupe = toString(byName('ActionDupe')),\n\t\tMovieId = toInteger(byName('MovieId')),\n\t\tTitle = toString(byName('Title')),\n\t\tGenre = toString(byName('Genre')),\n\t\tYear = toInteger(byName('Year')),\n\t\tRating = toInteger(byName('Rating')),\n\t\tRottenTom = toInteger(byName('RottenTom')),\n\t\tAction = toString(byName('Action')),\n\t\treleaseyear = toInteger(byName('releaseyear')),\n\t\tMonth = toInteger(byName('Month'))) ~> Myprojection\nMyprojection filter(releaseyear == 2019) ~> Filter1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tpartitionBy('key',\n\t\t0,\n\t\treleaseyear,\n\t\tMonth\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet3')]",
				"[concat(variables('factoryId'), '/datasets/ParquetOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivots')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Loans",
								"type": "DatasetReference"
							},
							"name": "loans",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Pivot1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						}
					],
					"script": "\n\nsource(output(\n\t\tid as string,\n\t\tmember_id as string,\n\t\tloan_amnt as string,\n\t\tfunded_amnt as string,\n\t\tfunded_amnt_inv as string,\n\t\tterm as string,\n\t\tint_rate as string,\n\t\tinstallment as string,\n\t\tgrade as string,\n\t\tsub_grade as string,\n\t\temp_title as string,\n\t\temp_length as string,\n\t\thome_ownership as string,\n\t\tannual_inc as string,\n\t\tverification_status as string,\n\t\tissue_d as string,\n\t\tloan_status as string,\n\t\tpymnt_plan as string,\n\t\turl as string,\n\t\tdesc as string,\n\t\tpurpose as string,\n\t\ttitle as string,\n\t\tzip_code as string,\n\t\taddr_state as string,\n\t\tdti as string,\n\t\tdelinq_2yrs as string,\n\t\tearliest_cr_line as string,\n\t\tinq_last_6mths as string,\n\t\tmths_since_last_delinq as string,\n\t\tmths_since_last_record as string,\n\t\topen_acc as string,\n\t\tpub_rec as string,\n\t\trevol_bal as string,\n\t\trevol_util as string,\n\t\ttotal_acc as string,\n\t\tinitial_list_status as string,\n\t\tout_prncp as string,\n\t\tout_prncp_inv as string,\n\t\ttotal_pymnt as string,\n\t\ttotal_pymnt_inv as string,\n\t\ttotal_rec_prncp as string,\n\t\ttotal_rec_int as string,\n\t\ttotal_rec_late_fee as string,\n\t\trecoveries as string,\n\t\tcollection_recovery_fee as string,\n\t\tlast_pymnt_d as string,\n\t\tlast_pymnt_amnt as string,\n\t\tnext_pymnt_d as string,\n\t\tlast_credit_pull_d as string,\n\t\tcollections_12_mths_ex_med as string,\n\t\tmths_since_last_major_derog as string,\n\t\tpolicy_code as string,\n\t\tapplication_type as string,\n\t\tannual_inc_joint as string,\n\t\tdti_joint as string,\n\t\tverification_status_joint as string,\n\t\tacc_now_delinq as string,\n\t\ttot_coll_amt as string,\n\t\ttot_cur_bal as string,\n\t\topen_acc_6m as string,\n\t\topen_il_6m as string,\n\t\topen_il_12m as string,\n\t\topen_il_24m as string,\n\t\tmths_since_rcnt_il as string,\n\t\ttotal_bal_il as string,\n\t\til_util as string,\n\t\topen_rv_12m as string,\n\t\topen_rv_24m as string,\n\t\tmax_bal_bc as string,\n\t\tall_util as string,\n\t\ttotal_rev_hi_lim as string,\n\t\tinq_fi as string,\n\t\ttotal_cu_tl as string,\n\t\tinq_last_12m as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> loans\nFilter1 pivot(groupBy(zip_code),\n\tpivotBy(grade),\n\tNumberOf_ = count(1),\n\tcolumnNaming: '$N$V_Grades',\n\tlateral: false) ~> Pivot1\nloans filter(length(zip_code)==5) ~> Filter1\nPivot1 derive(NumberOf_A_Grades = toLong(byName('NumberOf_A_Grades')),\n\t\tNumberOf_B_Grades = toLong(byName('NumberOf_B_Grades')),\n\t\tNumberOf_C_Grades = toLong(byName('NumberOf_C_Grades')),\n\t\tNumberOf_D_Grades = toLong(byName('NumberOf_D_Grades')),\n\t\tNumberOf_E_Grades = toLong(byName('NumberOf_E_Grades')),\n\t\tNumberOf_F_Grades = toLong(byName('NumberOf_F_Grades')),\n\t\tNumberOf_G_Grades = toLong(byName('NumberOf_G_Grades'))) ~> MapDrifted1\nMapDrifted1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tmapColumn(\n\t\tzip_code,\n\t\tNumberOf_A_Grades,\n\t\tNumberOf_B_Grades,\n\t\tNumberOf_C_Grades,\n\t\tNumberOf_D_Grades,\n\t\tNumberOf_E_Grades,\n\t\tNumberOf_F_Grades,\n\t\tNumberOf_G_Grades\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Loans')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/processMultipleTables')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dbSourceParams",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dbTargetParams",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "\n\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dbSourceParams')]",
				"[concat(variables('factoryId'), '/datasets/dbTargetParams')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ruleBasedPatterns')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "moviesDB2",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MapCanonicalModel"
						},
						{
							"name": "Cast"
						},
						{
							"name": "AvgRatingByYear"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovies as string,\n\t\tTitle as string,\n\t\tgenresgenregenre as string,\n\t\tYEAR as string,\n\t\tRating as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 select(mapColumn(\n\t\teach(match(locate('title',lower(name))!=0),\n\t\t\t'title' = $$),\n\t\teach(match(locate('year',lower(name))!=0),\n\t\t\t'year' = $$),\n\t\teach(match(locate('rating',lower(name))!=0),\n\t\t\t'rating' = $$),\n\t\teach(match(locate('genre',lower(name))!=0),\n\t\t\t'genre' = $$)\n\t)) ~> MapCanonicalModel\nFilter1 derive(year = toInteger(year),\n\t\trating = toInteger(rating)) ~> Cast\nCast aggregate(groupBy(year),\n\tAvgRating = round(avg(rating),2)) ~> AvgRatingByYear\nMapCanonicalModel filter(year == '1986') ~> Filter1\nAvgRatingByYear sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/moviesDB2')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/schemaDrift2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "moviesDriftSource1",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "moviesDriftSource1",
								"type": "DatasetReference"
							},
							"name": "source2",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Join1"
						}
					],
					"script": "\n\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> source2\nsource1 derive(myjoinid1 = byName('movie')) ~> DerivedColumn1\nsource2 derive(myjoinid2 = byName('movie')) ~> DerivedColumn2\nDerivedColumn1, DerivedColumn2 join(myjoinid1 == myjoinid2,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1\nJoin1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['mydriftfile.csv'],\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/moviesDriftSource1')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/skipped')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "readskipped",
								"type": "DatasetReference"
							},
							"name": "skiplines",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "\nparameters{\n\tskiplines as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipLines: (toInteger($skiplines))) ~> skiplines\nskiplines sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\temptyLinesAsHeader: (toInteger($skiplines)),\n\tpartitionFileNames:['skippedrows.csv'],\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/readskipped')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/soccerETL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Soccer"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "soccer_events_dt",
								"type": "DatasetReference"
							},
							"name": "specifySchemaExtracts",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "locationMap_dt",
								"type": "DatasetReference"
							},
							"name": "locationMap",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "soccerDB",
								"type": "DatasetReference"
							},
							"name": "SQLDBSink"
						}
					],
					"transformations": [
						{
							"name": "dictionaryMapping"
						},
						{
							"name": "joinStringDataViaLookup"
						},
						{
							"name": "columnSelectorRenaming"
						},
						{
							"name": "timeBins"
						}
					],
					"script": "\n\nsource(output(\n\t\tid_odsp as string,\n\t\tid_event as string,\n\t\tsort_order as short,\n\t\ttime as short,\n\t\ttext as string,\n\t\tevent_type as integer,\n\t\tevent_type2 as integer,\n\t\tside as short,\n\t\tevent_team as string,\n\t\topponent as string,\n\t\tplayer as string,\n\t\tplayer2 as string,\n\t\tplayer_in as string,\n\t\tplayer_out as string,\n\t\tshot_place as string,\n\t\tshot_outcome as string,\n\t\tis_goal as boolean,\n\t\tlocation as string,\n\t\tbodypart as string,\n\t\tassist_method as short,\n\t\tsituation as string,\n\t\tfast_break as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> specifySchemaExtracts\nsource(output(\n\t\tType as string,\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> locationMap\nspecifySchemaExtracts derive(eventTypeMap = case(\r\n    event_type == 0,'Announcement',\r\n    event_type == 1,'Attempt',\r\n    event_type == 2,'Corner',\r\n    event_type == 3,'Foul',\r\n    event_type == 4,'Yellow Card',\r\n    event_type == 5,'Second yellow card',\r\n    event_type == 6,'Red card',\r\n    event_type == 7,'Substitution',\r\n    event_type == 8,'Free kick won',\r\n    event_type == 9,'Offside',\r\n    event_type == 10,'Hand ball',\r\n    event_type == 11,'Penalty conceded',\r\n    event_type == 98, 'NA'\r\n),\n\t\tdummy = 1) ~> dictionaryMapping\ndictionaryMapping, locationMap join(location == Type,\n\tjoinType:'left',\n\tbroadcast: 'none')~> joinStringDataViaLookup\njoinStringDataViaLookup select(mapColumn(\n\t\tid_odsp,\n\t\tid_event,\n\t\tsort_order,\n\t\ttext,\n\t\tevent_type,\n\t\tevent_type2,\n\t\tside,\n\t\tevent_team,\n\t\topponent,\n\t\tplayer,\n\t\tplayer2,\n\t\tplayer_in,\n\t\tplayer_out,\n\t\tshot_place,\n\t\tshot_outcome,\n\t\tis_goal,\n\t\tlocation,\n\t\tbodypart,\n\t\tassist_method,\n\t\tsituation,\n\t\tfast_break,\n\t\teventTypeMap,\n\t\tType,\n\t\tName,\n\t\tdummy,\n\t\ttime\n\t),\n\tpartitionBy('hash', 200,\n\t\tid_event\n\t)) ~> columnSelectorRenaming\ncolumnSelectorRenaming window(over(time),\n\tdesc(sort_order, true),\n\tTimeBins = nTile(10)) ~> timeBins\ntimeBins sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tbatchSize: 2000,\n\tpartitionBy('roundRobin', 40)) ~> SQLDBSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/soccer_events_dt')]",
				"[concat(variables('factoryId'), '/datasets/locationMap_dt')]",
				"[concat(variables('factoryId'), '/datasets/soccerDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/updateRows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesSQLDB",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSQLDB",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 derive(Rating = 5) ~> DerivedColumn1\nDerivedColumn1 alterRow(updateIf(year==-1980)) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tformat: 'table',\n\tkeys:['movie']) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wheredoesmydatabegin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "salesskip",
								"type": "DatasetReference"
							},
							"name": "source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AddRowNums"
						},
						{
							"name": "DefineDataLines"
						},
						{
							"name": "FindFirstLine"
						}
					],
					"script": "\n\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 keyGenerate(output(rownum as long),\n\tstartAt: 1L) ~> AddRowNums\nAddRowNums derive(datalines = iif(!isNull(toInteger(left(toString(byPosition(1)),1))),toInteger(rownum),toInteger(9999999))) ~> DefineDataLines\nDefineDataLines aggregate(firstline = toInteger(minIf(datalines!=0,datalines))) ~> FindFirstLine\nFindFirstLine sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['skiplines.csv'],\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/salesskip')]",
				"[concat(variables('factoryId'), '/datasets/folderout')]"
			]
		}
	]
}